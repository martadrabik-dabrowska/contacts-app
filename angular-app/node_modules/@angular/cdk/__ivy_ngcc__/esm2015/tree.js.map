{"version":3,"file":"tree.js","sources":["../../../src/cdk/tree/control/base-tree-control.ts","../../../src/cdk/tree/control/flat-tree-control.ts","../../../src/cdk/tree/control/nested-tree-control.ts","../../../src/cdk/tree/outlet.ts","../../../src/cdk/tree/node.ts","../../../src/cdk/tree/tree-errors.ts","../../../src/cdk/tree/tree.ts","../../../src/cdk/tree/nested-node.ts","../../../src/cdk/tree/padding.ts","../../../src/cdk/tree/toggle.ts","../../../src/cdk/tree/tree-module.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs';\nimport {TreeControl} from './tree-control';\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nexport abstract class BaseTreeControl<T> implements TreeControl<T> {\n\n  /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\n  abstract getDescendants(dataNode: T): T[];\n\n  /** Expands all data nodes in the tree. */\n  abstract expandAll(): void;\n\n  /** Saved data node for `expandAll` action. */\n  dataNodes: T[];\n\n  /** A selection model with multi-selection to track expansion status. */\n  expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\n\n  /** Get depth of a given data node, return the level number. This is for flat tree node. */\n  getLevel: (dataNode: T) => number;\n\n  /**\n   * Whether the data node is expandable. Returns true if expandable.\n   * This is for flat tree node.\n   */\n  isExpandable: (dataNode: T) => boolean;\n\n  /** Gets a stream that emits whenever the given data node's children change. */\n  getChildren: (dataNode: T) => (Observable<T[]> | T[] | undefined | null);\n\n  /** Toggles one single data node's expanded/collapsed state. */\n  toggle(dataNode: T): void {\n    this.expansionModel.toggle(dataNode);\n  }\n\n  /** Expands one single data node. */\n  expand(dataNode: T): void {\n    this.expansionModel.select(dataNode);\n  }\n\n  /** Collapses one single data node. */\n  collapse(dataNode: T): void {\n    this.expansionModel.deselect(dataNode);\n  }\n\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n  isExpanded(dataNode: T): boolean {\n    return this.expansionModel.isSelected(dataNode);\n  }\n\n  /** Toggles a subtree rooted at `node` recursively. */\n  toggleDescendants(dataNode: T): void {\n    this.expansionModel.isSelected(dataNode)\n        ? this.collapseDescendants(dataNode)\n        : this.expandDescendants(dataNode);\n  }\n\n  /** Collapse all dataNodes in the tree. */\n  collapseAll(): void {\n    this.expansionModel.clear();\n  }\n\n  /** Expands a subtree rooted at given data node recursively. */\n  expandDescendants(dataNode: T): void {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.select(...toBeProcessed);\n  }\n\n  /** Collapses a subtree rooted at given data node recursively. */\n  collapseDescendants(dataNode: T): void {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.deselect(...toBeProcessed);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseTreeControl} from './base-tree-control';\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nexport class FlatTreeControl<T> extends BaseTreeControl<T> {\n\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\n  constructor(public getLevel: (dataNode: T) => number,\n              public isExpandable: (dataNode: T) => boolean) {\n    super();\n  }\n\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   */\n  getDescendants(dataNode: T): T[] {\n    const startIndex = this.dataNodes.indexOf(dataNode);\n    const results: T[] = [];\n\n    // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n    // The level of descendants of a tree node must be greater than the level of the given\n    // tree node.\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\n    // sibling of an ancestor.\n    for (let i = startIndex + 1;\n        i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\n        i++) {\n      results.push(this.dataNodes[i]);\n    }\n    return results;\n  }\n\n  /**\n   * Expands all data nodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n   * data nodes of the tree.\n   */\n  expandAll(): void {\n    this.expansionModel.select(...this.dataNodes);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Observable} from 'rxjs';\nimport {take, filter} from 'rxjs/operators';\nimport {BaseTreeControl} from './base-tree-control';\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\n\n  /** Construct with nested tree function getChildren. */\n  constructor(public getChildren: (dataNode: T) => (Observable<T[]> | T[] | undefined | null)) {\n    super();\n  }\n\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   */\n  expandAll(): void {\n    this.expansionModel.clear();\n    const allNodes = this.dataNodes.reduce((accumulator: T[], dataNode) =>\n        [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n    this.expansionModel.select(...allNodes);\n  }\n\n  /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n  getDescendants(dataNode: T): T[] {\n    const descendants: T[] = [];\n\n    this._getDescendants(descendants, dataNode);\n    // Remove the node itself\n    return descendants.splice(1);\n  }\n\n  /** A helper function to get descendants recursively. */\n  protected _getDescendants(descendants: T[], dataNode: T): void {\n    descendants.push(dataNode);\n    const childrenNodes = this.getChildren(dataNode);\n    if (Array.isArray(childrenNodes)) {\n      childrenNodes.forEach((child: T) => this._getDescendants(descendants, child));\n    } else if (childrenNodes instanceof Observable) {\n      // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n      // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n      childrenNodes.pipe(take(1), filter(Boolean as () => boolean))\n          .subscribe(children => {\n            for (const child of children) {\n              this._getDescendants(descendants, child);\n            }\n          });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  Inject,\n  InjectionToken,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nexport const CDK_TREE_NODE_OUTLET_NODE = new InjectionToken<{}>('CDK_TREE_NODE_OUTLET_NODE');\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[cdkTreeNodeOutlet]'\n})\nexport class CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n\n/** Context provided to the tree node component. */\nexport class CdkTreeNodeOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n  selector: '[cdkTreeNodeDef]',\n  inputs: [\n    'when: cdkTreeNodeDefWhen'\n  ],\n})\nexport class CdkTreeNodeDef<T> {\n  /**\n   * Function that should return true if this node template should be used for the provided node\n   * data and index. If left undefined, this node will be considered the default node template to\n   * use when no other when functions return true for the data.\n   * For every node, there must be at least one when function that passes or an undefined to\n   * default.\n   */\n  when: (index: number, nodeData: T) => boolean;\n\n  /** @docs-private */\n  constructor(public template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nexport function getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nexport function getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nexport function getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nexport function getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nexport function getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {CollectionViewer, DataSource, isDataSource} from '@angular/cdk/collections';\nimport {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  TrackByFunction\n} from '@angular/core';\nimport {BehaviorSubject, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {TreeControl} from './control/tree-control';\nimport {CdkTreeNodeDef, CdkTreeNodeOutletContext} from './node';\nimport {CdkTreeNodeOutlet} from './outlet';\nimport {\n  getTreeControlFunctionsMissingError,\n  getTreeControlMissingError,\n  getTreeMissingMatchingNodeDefError,\n  getTreeMultipleDefaultNodeDefsError,\n  getTreeNoValidDataSourceError\n} from './tree-errors';\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-tree',\n  exportAs: 'cdkTree',\n  template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'cdk-tree',\n    'role': 'tree',\n  },\n  encapsulation: ViewEncapsulation.None,\n\n  // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n  // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n  // declared elsewhere, they are checked when their declaration points are checked.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default\n})\nexport class CdkTree<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<T>;\n\n  /** Stores the node definition that does not have a when predicate. */\n  private _defaultNodeDef: CdkTreeNodeDef<T> | null;\n\n  /** Data subscription */\n  private _dataSubscription: Subscription | null;\n\n  /** Level of nodes */\n  private _levels: Map<T, number> = new Map<T, number>();\n\n  /**\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\n   * stream of view window (what dataNodes are currently on screen).\n   * Data source can be an observable of data array, or a data array to render.\n   */\n  @Input()\n  get dataSource(): DataSource<T> | Observable<T[]> | T[] { return this._dataSource; }\n  set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  private _dataSource: DataSource<T> | Observable<T[]> | T[];\n\n  /** The tree controller */\n  @Input() treeControl: TreeControl<T>;\n\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n   * relative to the function to know if a node should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n  @Input() trackBy: TrackByFunction<T>;\n\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(CdkTreeNodeOutlet, {static: true}) _nodeOutlet: CdkTreeNodeOutlet;\n\n  /** The tree node template for the tree */\n  @ContentChildren(CdkTreeNodeDef) _nodeDefs: QueryList<CdkTreeNodeDef<T>>;\n\n  // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n  //     Remove the MAX_VALUE in viewChange\n  /**\n   * Stream containing the latest information on what rows are being displayed on screen.\n   * Can be used by the data source to as a heuristic of what data should be provided.\n   */\n  viewChange =\n    new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\n\n  constructor(private _differs: IterableDiffers,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._dataDiffer = this._differs.find([]).create(this.trackBy);\n    if (!this.treeControl) {\n      throw getTreeControlMissingError();\n    }\n  }\n\n  ngOnDestroy() {\n    this._nodeOutlet.viewContainer.clear();\n\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n      (this.dataSource as DataSource<T>).disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n  }\n\n  ngAfterContentChecked() {\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n    if (defaultNodeDefs.length > 1) {\n      throw getTreeMultipleDefaultNodeDefsError();\n    }\n    this._defaultNodeDef = defaultNodeDefs[0];\n\n    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n      this._observeRenderChanges();\n    }\n  }\n\n\n  // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n  //     and nested trees.\n\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the node outlet. Otherwise start listening for new data.\n   */\n  private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n      (this.dataSource as DataSource<T>).disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n\n    // Remove the all dataNodes if there is now no data source\n    if (!dataSource) {\n      this._nodeOutlet.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n    if (this._nodeDefs) {\n      this._observeRenderChanges();\n    }\n  }\n\n  /** Set up a subscription for the data provided by the data source. */\n  private _observeRenderChanges() {\n    let dataStream: Observable<T[] | ReadonlyArray<T>> | undefined;\n\n    if (isDataSource(this._dataSource)) {\n      dataStream = this._dataSource.connect(this);\n    } else if (this._dataSource instanceof Observable) {\n      dataStream = this._dataSource;\n    } else if (Array.isArray(this._dataSource)) {\n      dataStream = observableOf(this._dataSource);\n    }\n\n    if (dataStream) {\n      this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n        .subscribe(data => this.renderNodeChanges(data));\n    } else {\n      throw getTreeNoValidDataSourceError();\n    }\n  }\n\n  /** Check for changes made in the data and render each change (node added/removed/moved). */\n  renderNodeChanges(data: T[] | ReadonlyArray<T>, dataDiffer: IterableDiffer<T> = this._dataDiffer,\n                    viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer,\n                    parentData?: T) {\n    const changes = dataDiffer.diff(data);\n    if (!changes) { return; }\n\n    changes.forEachOperation((item: IterableChangeRecord<T>,\n                              adjustedPreviousIndex: number | null,\n                              currentIndex: number | null) => {\n        if (item.previousIndex == null) {\n          this.insertNode(data[currentIndex!], currentIndex!, viewContainer, parentData);\n        } else if (currentIndex == null) {\n          viewContainer.remove(adjustedPreviousIndex!);\n          this._levels.delete(item.item);\n        } else {\n          const view = viewContainer.get(adjustedPreviousIndex!);\n          viewContainer.move(view!, currentIndex);\n        }\n      });\n\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /**\n   * Finds the matching node definition that should be used for this node data. If there is only\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\n   * predicate that returns true with the data. If none return true, return the default node\n   * definition.\n   */\n  _getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\n    if (this._nodeDefs.length === 1) { return this._nodeDefs.first; }\n\n    const nodeDef =\n      this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n    if (!nodeDef) { throw getTreeMissingMatchingNodeDefError(); }\n\n    return nodeDef;\n  }\n\n  /**\n   * Create the embedded view for the data node template and place it in the correct index location\n   * within the data node view container.\n   */\n  insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n    const node = this._getNodeDef(nodeData, index);\n\n    // Node context that will be provided to created embedded view\n    const context = new CdkTreeNodeOutletContext<T>(nodeData);\n\n    // If the tree is flat tree, then use the `getLevel` function in flat tree control\n    // Otherwise, use the level of parent node.\n    if (this.treeControl.getLevel) {\n      context.level = this.treeControl.getLevel(nodeData);\n    } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n      context.level = this._levels.get(parentData)! + 1;\n    } else {\n      context.level = 0;\n    }\n    this._levels.set(nodeData, context.level);\n\n    // Use default tree nodeOutlet, or nested node's nodeOutlet\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n    container.createEmbeddedView(node.template, context, index);\n\n    // Set the data to just created `CdkTreeNode`.\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n    if (CdkTreeNode.mostRecentTreeNode) {\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\n    }\n  }\n}\n\n\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n@Directive({\n  selector: 'cdk-tree-node',\n  exportAs: 'cdkTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'cdk-tree-node',\n  },\n})\nexport class CdkTreeNode<T> implements FocusableOption, OnDestroy {\n  /**\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n   * in `CdkTree` and set the data to it.\n   */\n  static mostRecentTreeNode: CdkTreeNode<any> | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** Emits when the node's data has changed. */\n  _dataChanges = new Subject<void>();\n\n  /** The tree node's data. */\n  get data(): T { return this._data; }\n  set data(value: T) {\n    if (value !== this._data) {\n      this._data = value;\n      this._setRoleFromData();\n      this._dataChanges.next();\n    }\n  }\n  protected _data: T;\n\n  get isExpanded(): boolean {\n    return this._tree.treeControl.isExpanded(this._data);\n  }\n\n  get level(): number {\n    return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n  }\n\n  /**\n   * The role of the node should be 'group' if it's an internal node,\n   * and 'treeitem' if it's a leaf node.\n   */\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>) {\n    CdkTreeNode.mostRecentTreeNode = this as CdkTreeNode<T>;\n  }\n\n  ngOnDestroy() {\n    // If this is the last tree node being destroyed,\n    // clear out the reference to avoid leaking memory.\n    if (CdkTreeNode.mostRecentTreeNode === this) {\n      CdkTreeNode.mostRecentTreeNode = null;\n    }\n\n    this._dataChanges.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Focuses the menu item. Implements for FocusableOption. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  protected _setRoleFromData(): void {\n    if (this._tree.treeControl.isExpandable) {\n      this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n    } else {\n      if (!this._tree.treeControl.getChildren) {\n        throw getTreeControlFunctionsMissingError();\n      }\n      const childrenNodes = this._tree.treeControl.getChildren(this._data);\n      if (Array.isArray(childrenNodes)) {\n        this._setRoleFromChildren(childrenNodes as T[]);\n      } else if (childrenNodes instanceof Observable) {\n        childrenNodes.pipe(takeUntil(this._destroyed))\n            .subscribe(children => this._setRoleFromChildren(children));\n      }\n    }\n  }\n\n  protected _setRoleFromChildren(children: T[]) {\n    this.role = children && children.length ? 'group' : 'treeitem';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from './outlet';\nimport {CdkTree, CdkTreeNode} from './tree';\nimport {getTreeControlFunctionsMissingError} from './tree-errors';\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-nested-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-nested-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-nested-tree-node>\n *   </cdk-nested-tree-node>\n *   ```\n */\n@Directive({\n  selector: 'cdk-nested-tree-node',\n  exportAs: 'cdkNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'cdk-tree-node cdk-nested-tree-node',\n  },\n  providers: [\n    {provide: CdkTreeNode, useExisting: CdkNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode}\n  ]\n})\nexport class CdkNestedTreeNode<T> extends CdkTreeNode<T> implements AfterContentInit, OnDestroy {\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<T>;\n\n  /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\n  protected _children: T[];\n\n  /** The children node placeholder. */\n  @ContentChildren(CdkTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<CdkTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers) {\n    super(_elementRef, _tree);\n  }\n\n  ngAfterContentInit() {\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n    if (!this._tree.treeControl.getChildren) {\n      throw getTreeControlFunctionsMissingError();\n    }\n    const childrenNodes = this._tree.treeControl.getChildren(this.data);\n    if (Array.isArray(childrenNodes)) {\n      this.updateChildrenNodes(childrenNodes as T[]);\n    } else if (childrenNodes instanceof Observable) {\n      childrenNodes.pipe(takeUntil(this._destroyed))\n        .subscribe(result => this.updateChildrenNodes(result));\n    }\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n        .subscribe(() => this.updateChildrenNodes());\n  }\n\n  ngOnDestroy() {\n    this._clear();\n    super.ngOnDestroy();\n  }\n\n  /** Add children dataNodes to the NodeOutlet */\n  protected updateChildrenNodes(children?: T[]): void {\n    const outlet = this._getNodeOutlet();\n    if (children) {\n      this._children = children;\n    }\n    if (outlet && this._children) {\n      const viewContainer = outlet.viewContainer;\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n    } else {\n      // Reset the data differ if there's no children nodes displayed\n      this._dataDiffer.diff([]);\n    }\n  }\n\n  /** Clear the children dataNodes. */\n  protected _clear(): void {\n    const outlet = this._getNodeOutlet();\n    if (outlet) {\n      outlet.viewContainer.clear();\n      this._dataDiffer.diff([]);\n    }\n  }\n\n  /** Gets the outlet for the current node. */\n  private _getNodeOutlet() {\n    const outlets = this.nodeOutlet;\n\n    // Note that since we use `descendants: true` on the query, we have to ensure\n    // that we don't pick up the outlet of a child node by accident.\n    return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, Input, OnDestroy, Optional, Renderer2} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\nimport {CdkTree, CdkTreeNode} from './tree';\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n@Directive({\n  selector: '[cdkTreeNodePadding]',\n})\nexport class CdkTreeNodePadding<T> implements OnDestroy {\n  /** Current padding value applied to the element. Used to avoid unnecessarily hitting the DOM. */\n  private _currentPadding: string|null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** CSS units used for the indentation value. */\n  indentUnits = 'px';\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('cdkTreeNodePadding')\n  get level(): number { return this._level; }\n  set level(value: number) {\n    // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n    // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n    // they set 0 explicitly.\n    this._level = coerceNumberProperty(value, null)!;\n    this._setPadding();\n  }\n  _level: number;\n\n  /**\n   * The indent for each level. Can be a number or a CSS string.\n   * Default number 40px from material design menu sub-menu spec.\n   */\n  @Input('cdkTreeNodePaddingIndent')\n  get indent(): number | string { return this._indent; }\n  set indent(indent: number | string) {\n    let value = indent;\n    let units = 'px';\n\n    if (typeof indent === 'string') {\n      const parts = indent.split(cssUnitPattern);\n      value = parts[0];\n      units = parts[1] || units;\n    }\n\n    this.indentUnits = units;\n    this._indent = coerceNumberProperty(value);\n    this._setPadding();\n  }\n  _indent: number = 40;\n\n  constructor(private _treeNode: CdkTreeNode<T>,\n              private _tree: CdkTree<T>,\n              private _renderer: Renderer2,\n              private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {\n    this._setPadding();\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n    }\n\n    // In Ivy the indentation binding might be set before the tree node's data has been added,\n    // which means that we'll miss the first render. We have to subscribe to changes in the\n    // data to ensure that everything is up to date.\n    _treeNode._dataChanges.subscribe(() => this._setPadding());\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n  _paddingIndent(): string|null {\n    const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n      ? this._tree.treeControl.getLevel(this._treeNode.data)\n      : null;\n    const level = this._level == null ? nodeLevel : this._level;\n    return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n  }\n\n  _setPadding(forceChange = false) {\n    const padding = this._paddingIndent();\n\n    if (padding !== this._currentPadding || forceChange) {\n      const element = this._element.nativeElement;\n      const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n      const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n      this._renderer.setStyle(element, paddingProp, padding);\n      this._renderer.setStyle(element, resetProp, null);\n      this._currentPadding = padding;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, HostListener, Input} from '@angular/core';\n\nimport {CdkTree, CdkTreeNode} from './tree';\n\n/**\n * Node toggle to expand/collapse the node.\n */\n@Directive({selector: '[cdkTreeNodeToggle]'})\nexport class CdkTreeNodeToggle<T> {\n  /** Whether expand/collapse the node recursively. */\n  @Input('cdkTreeNodeToggleRecursive')\n  get recursive(): boolean { return this._recursive; }\n  set recursive(value: boolean) { this._recursive = coerceBooleanProperty(value); }\n  protected _recursive = false;\n\n  constructor(protected _tree: CdkTree<T>,\n              protected _treeNode: CdkTreeNode<T>) {}\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _toggle(event: Event): void {\n    this.recursive\n      ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n      : this._tree.treeControl.toggle(this._treeNode.data);\n\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {CdkTreeNodeOutlet} from './outlet';\nimport {CdkTreeNodePadding} from './padding';\nimport {CdkTreeNodeToggle} from './toggle';\nimport {CdkTree, CdkTreeNode} from './tree';\nimport {CdkTreeNodeDef} from './node';\nimport {CdkNestedTreeNode} from './nested-node';\n\nconst EXPORTED_DECLARATIONS = [\n  CdkNestedTreeNode,\n  CdkTreeNodeDef,\n  CdkTreeNodePadding,\n  CdkTreeNodeToggle,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeOutlet,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n  providers: [FocusMonitor, CdkTreeNodeDef]\n})\nexport class CdkTreeModule {}\n"]}