{"version":3,"file":"portal.js","sources":["../../../src/cdk/portal/portal-errors.ts","../../../src/cdk/portal/portal.ts","../../../src/cdk/portal/dom-portal-outlet.ts","../../../src/cdk/portal/portal-directives.ts","../../../src/cdk/portal/portal-injector.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nexport function throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nexport function throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nexport function throwPortalOutletAlreadyDisposedError() {\n  throw Error('This PortalOutlet has already been disposed');\n}\n\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nexport function throwUnknownPortalTypeError() {\n  throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n              'a ComponentPortal or a TemplatePortal.');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nexport function throwNullPortalOutletError() {\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nexport function throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    EmbeddedViewRef,\n    Injector,\n    ComponentFactoryResolver,\n} from '@angular/core';\nimport {\n    throwNullPortalOutletError,\n    throwPortalAlreadyAttachedError,\n    throwNoPortalAttachedError,\n    throwNullPortalError,\n    throwPortalOutletAlreadyDisposedError,\n    throwUnknownPortalTypeError\n} from './portal-errors';\n\n/** Interface that can be used to generically type a class. */\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nexport abstract class Portal<T> {\n  private _attachedHost: PortalOutlet | null;\n\n  /** Attach this portal to a host. */\n  attach(host: PortalOutlet): T {\n    if (host == null) {\n      throwNullPortalOutletError();\n    }\n\n    if (host.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    this._attachedHost = host;\n    return <T> host.attach(this);\n  }\n\n  /** Detach this portal from its host */\n  detach(): void {\n    let host = this._attachedHost;\n\n    if (host == null) {\n      throwNoPortalAttachedError();\n    } else {\n      this._attachedHost = null;\n      host.detach();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host: PortalOutlet | null) {\n    this._attachedHost = host;\n  }\n}\n\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalOutlet.\n   * The origin is necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef?: ViewContainerRef | null;\n\n  /** [Optional] Injector used for the instantiation of the component. */\n  injector?: Injector | null;\n\n  /**\n   * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n   * Defaults to using the resolver from the outlet that the portal is attached to.\n   */\n  componentFactoryResolver?: ComponentFactoryResolver | null;\n\n  constructor(\n      component: ComponentType<T>,\n      viewContainerRef?: ViewContainerRef | null,\n      injector?: Injector | null,\n      componentFactoryResolver?: ComponentFactoryResolver | null) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n    this.componentFactoryResolver = componentFactoryResolver;\n  }\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal<C = any> extends Portal<EmbeddedViewRef<C>> {\n  /** The embedded template that will be used to instantiate an embedded View in the host. */\n  templateRef: TemplateRef<C>;\n\n  /** Reference to the ViewContainer into which the template will be stamped out. */\n  viewContainerRef: ViewContainerRef;\n\n  /** Contextual data to be passed in to the embedded view. */\n  context: C | undefined;\n\n  constructor(template: TemplateRef<C>, viewContainerRef: ViewContainerRef, context?: C) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n    this.context = context;\n  }\n\n  get origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n\n  /**\n   * Attach the portal to the provided `PortalOutlet`.\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\n   * instance.\n   */\n  attach(host: PortalOutlet, context: C | undefined = this.context): EmbeddedViewRef<C> {\n    this.context = context;\n    return super.attach(host);\n  }\n\n  detach(): void {\n    this.context = undefined;\n    return super.detach();\n  }\n}\n\n\n/** A `PortalOutlet` is an space that can contain a single `Portal`. */\nexport interface PortalOutlet {\n  /** Attaches a portal to this outlet. */\n  attach(portal: Portal<any>): any;\n\n  /** Detaches the currently attached portal from this outlet. */\n  detach(): any;\n\n  /** Performs cleanup before the outlet is destroyed. */\n  dispose(): void;\n\n  /** Whether there is currently a portal attached to this outlet. */\n  hasAttached(): boolean;\n}\n\n/**\n * @deprecated Use `PortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport type PortalHost = PortalOutlet;\n\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nexport abstract class BasePortalOutlet implements PortalOutlet {\n  /** The portal currently attached to the host. */\n  protected _attachedPortal: Portal<any> | null;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn: (() => void) | null;\n\n  /** Whether this host has already been permanently disposed. */\n  private _isDisposed: boolean = false;\n\n  /** Whether this host has an attached portal. */\n  hasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /** Attaches a portal. */\n  attach(portal: Portal<any>): any {\n    if (!portal) {\n      throwNullPortalError();\n    }\n\n    if (this.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    if (this._isDisposed) {\n      throwPortalOutletAlreadyDisposedError();\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n    }\n\n    throwUnknownPortalTypeError();\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n  abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n\n  /** Detaches a previously attached portal. */\n  detach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n\n  /** Permanently dispose of this portal host. */\n  dispose(): void {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n\n  /** @docs-private */\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n\n  private _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport abstract class BasePortalHost extends BasePortalOutlet {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  ApplicationRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalOutlet, ComponentPortal, TemplatePortal} from './portal';\n\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nexport class DomPortalOutlet extends BasePortalOutlet {\n  constructor(\n      /** Element into which the content is projected. */\n      public outletElement: Element,\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _appRef: ApplicationRef,\n      private _defaultInjector: Injector) {\n    super();\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n          componentFactory,\n          portal.viewContainerRef.length,\n          portal.injector || portal.viewContainerRef.injector);\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n      this._appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n\n    return componentRef;\n  }\n\n  /**\n   * Attaches a template portal to the DOM as an embedded view.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    let viewContainer = portal.viewContainerRef;\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n    viewRef.detectChanges();\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\n    // (e.g Overlay Container) To move the view to the specified host element. We just\n    // re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n\n    this.setDisposeFn((() => {\n      let index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    }));\n\n    // TODO(jelbourn): Return locals from view.\n    return viewRef;\n  }\n\n  /**\n   * Clears out a portal from the DOM.\n   */\n  dispose(): void {\n    super.dispose();\n    if (this.outletElement.parentNode != null) {\n      this.outletElement.parentNode.removeChild(this.outletElement);\n    }\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport class DomPortalHost extends DomPortalOutlet {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  NgModule,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {BasePortalOutlet, ComponentPortal, Portal, TemplatePortal} from './portal';\n\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n@Directive({\n  selector: '[cdkPortal]',\n  exportAs: 'cdkPortal',\n})\nexport class CdkPortal extends TemplatePortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\n@Directive({\n  selector: '[cdk-portal], [portal]',\n  exportAs: 'cdkPortal',\n  providers: [{\n    provide: CdkPortal,\n    useExisting: TemplatePortalDirective\n  }]\n})\nexport class TemplatePortalDirective extends CdkPortal {}\n\n/**\n * Possible attached references to the CdkPortalOutlet.\n */\nexport type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\n\n\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n@Directive({\n  selector: '[cdkPortalOutlet]',\n  exportAs: 'cdkPortalOutlet',\n  inputs: ['portal: cdkPortalOutlet']\n})\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\n  /** Whether the portal component is initialized. */\n  private _isInitialized = false;\n\n  /** Reference to the currently-attached component/view ref. */\n  private _attachedRef: CdkPortalOutletAttachedRef;\n\n  constructor(\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  /** Portal associated with the Portal outlet. */\n  get portal(): Portal<any> | null {\n    return this._attachedPortal;\n  }\n\n  set portal(portal: Portal<any> | null) {\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\n    if (this.hasAttached() && !portal && !this._isInitialized) {\n      return;\n    }\n\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._attachedPortal = portal;\n  }\n\n  /** Emits when a portal is attached to the outlet. */\n  @Output() attached: EventEmitter<CdkPortalOutletAttachedRef> =\n      new EventEmitter<CdkPortalOutletAttachedRef>();\n\n  /** Component or view reference that is attached to the portal. */\n  get attachedRef(): CdkPortalOutletAttachedRef {\n    return this._attachedRef;\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    super.dispose();\n    this._attachedPortal = null;\n    this._attachedRef = null;\n  }\n\n  /**\n   * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n   *\n   * @param portal Portal to be attached to the portal outlet.\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalOutlet.\n    const viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\n    const ref = viewContainerRef.createComponent(\n        componentFactory, viewContainerRef.length,\n        portal.injector || viewContainerRef.injector);\n\n    super.setDisposeFn(() => ref.destroy());\n    this._attachedPortal = portal;\n    this._attachedRef = ref;\n    this.attached.emit(ref);\n\n    return ref;\n  }\n\n  /**\n   * Attach the given TemplatePortal to this PortlHost as an embedded View.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    portal.setAttachedHost(this);\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._attachedPortal = portal;\n    this._attachedRef = viewRef;\n    this.attached.emit(viewRef);\n\n    return viewRef;\n  }\n}\n\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n@Directive({\n  selector: '[cdkPortalHost], [portalHost]',\n  exportAs: 'cdkPortalHost',\n  inputs: ['portal: cdkPortalHost'],\n  providers: [{\n    provide: CdkPortalOutlet,\n    useExisting: PortalHostDirective\n  }]\n})\nexport class PortalHostDirective extends CdkPortalOutlet {}\n\n\n@NgModule({\n  exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n  declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n})\nexport class PortalModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n */\nexport class PortalInjector implements Injector {\n  constructor(\n    private _parentInjector: Injector,\n    private _customTokens: WeakMap<any, any>) { }\n\n  get(token: any, notFoundValue?: any): any {\n    const value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n"]}