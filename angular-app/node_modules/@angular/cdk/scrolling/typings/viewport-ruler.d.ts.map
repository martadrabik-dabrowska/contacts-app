{"version":3,"file":"viewport-ruler.d.ts","sources":["viewport-ruler.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { NgZone, OnDestroy, Optional } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n/** Time in ms to throttle the resize events by default. */\r\nexport declare const DEFAULT_RESIZE_TIME = 20;\r\n/** Object that holds the scroll position of the viewport in each direction. */\r\nexport interface ViewportScrollPosition {\r\n    top: number;\r\n    left: number;\r\n}\r\n/**\r\n * Simple utility for getting the bounds of the browser viewport.\r\n * @docs-private\r\n */\r\nexport declare class ViewportRuler implements OnDestroy {\r\n    private _platform;\r\n    /** Cached viewport dimensions. */\r\n    private _viewportSize;\r\n    /** Stream of viewport change events. */\r\n    private _change;\r\n    /** Subscription to streams that invalidate the cached viewport dimensions. */\r\n    private _invalidateCache;\r\n    constructor(_platform: Platform, ngZone: NgZone);\r\n    ngOnDestroy(): void;\r\n    /** Returns the viewport's width and height. */\r\n    getViewportSize(): Readonly<{\r\n        width: number;\r\n        height: number;\r\n    }>;\r\n    /** Gets a ClientRect for the viewport's bounds. */\r\n    getViewportRect(): ClientRect;\r\n    /** Gets the (top, left) scroll position of the viewport. */\r\n    getViewportScrollPosition(): ViewportScrollPosition;\r\n    /**\r\n     * Returns a stream that emits whenever the size of the viewport changes.\r\n     * @param throttleTime Time in milliseconds to throttle the stream.\r\n     */\r\n    change(throttleTime?: number): Observable<Event>;\r\n    /** Updates the cached viewport size. */\r\n    private _updateViewportSize;\r\n}\r\n/** @docs-private @deprecated @breaking-change 8.0.0 */\r\nexport declare function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler, platform: Platform, ngZone: NgZone): ViewportRuler;\r\n/** @docs-private @deprecated @breaking-change 8.0.0 */\r\nexport declare const VIEWPORT_RULER_PROVIDER: {\r\n    provide: typeof ViewportRuler;\r\n    deps: (Optional[] | typeof NgZone | typeof Platform)[];\r\n    useFactory: typeof VIEWPORT_RULER_PROVIDER_FACTORY;\r\n};\r\n"]}