{"version":3,"file":"calendar-body.d.ts","sources":["calendar-body.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ElementRef, EventEmitter, NgZone, OnChanges, SimpleChanges } from '@angular/core';\r\n/**\r\n * Extra CSS classes that can be associated with a calendar cell.\r\n */\r\nexport declare type MatCalendarCellCssClasses = string | string[] | Set<string> | {\r\n    [key: string]: any;\r\n};\r\n/**\r\n * An internal class that represents the data corresponding to a single calendar cell.\r\n * @docs-private\r\n */\r\nexport declare class MatCalendarCell {\r\n    value: number;\r\n    displayValue: string;\r\n    ariaLabel: string;\r\n    enabled: boolean;\r\n    cssClasses?: string | Set<string> | {\r\n        [key: string]: any;\r\n    } | string[] | undefined;\r\n    constructor(value: number, displayValue: string, ariaLabel: string, enabled: boolean, cssClasses?: string | Set<string> | {\r\n        [key: string]: any;\r\n    } | string[] | undefined);\r\n}\r\n/**\r\n * An internal component used to display calendar data in a table.\r\n * @docs-private\r\n */\r\nexport declare class MatCalendarBody implements OnChanges {\r\n    private _elementRef;\r\n    private _ngZone;\r\n    /** The label for the table. (e.g. \"Jan 2017\"). */\r\n    label: string;\r\n    /** The cells to display in the table. */\r\n    rows: MatCalendarCell[][];\r\n    /** The value in the table that corresponds to today. */\r\n    todayValue: number;\r\n    /** The value in the table that is currently selected. */\r\n    selectedValue: number;\r\n    /** The minimum number of free cells needed to fit the label in the first row. */\r\n    labelMinRequiredCells: number;\r\n    /** The number of columns in the table. */\r\n    numCols: number;\r\n    /** The cell number of the active cell in the table. */\r\n    activeCell: number;\r\n    /**\r\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\r\n     * maintained even as the table resizes.\r\n     */\r\n    cellAspectRatio: number;\r\n    /** Emits when a new value is selected. */\r\n    readonly selectedValueChange: EventEmitter<number>;\r\n    /** The number of blank cells to put at the beginning for the first row. */\r\n    _firstRowOffset: number;\r\n    /** Padding for the individual date cells. */\r\n    _cellPadding: string;\r\n    /** Width of an individual cell. */\r\n    _cellWidth: string;\r\n    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone);\r\n    _cellClicked(cell: MatCalendarCell): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    _isActiveCell(rowIndex: number, colIndex: number): boolean;\r\n    /** Focuses the active cell after the microtask queue is empty. */\r\n    _focusActiveCell(): void;\r\n}\r\n"]}