{"version":3,"file":"datepicker.d.ts","sources":["datepicker.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { Overlay, OverlayRef, ScrollStrategy } from '@angular/cdk/overlay';\r\nimport { ComponentType } from '@angular/cdk/portal';\r\nimport { AfterViewInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\r\nimport { CanColor, CanColorCtor, DateAdapter, ThemePalette } from '@angular/material/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Subject } from 'rxjs';\r\nimport { MatCalendar } from './calendar';\r\nimport { MatDatepickerInput } from './datepicker-input';\r\nimport { MatCalendarCellCssClasses } from './calendar-body';\r\n/** Injection token that determines the scroll handling while the calendar is open. */\r\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\r\n/** @docs-private */\r\nexport declare function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\r\n/** @docs-private */\r\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER: {\r\n    provide: InjectionToken<() => ScrollStrategy>;\r\n    deps: (typeof Overlay)[];\r\n    useFactory: typeof MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY;\r\n};\r\n/** @docs-private */\r\ndeclare class MatDatepickerContentBase {\r\n    _elementRef: ElementRef;\r\n    constructor(_elementRef: ElementRef);\r\n}\r\ndeclare const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase;\r\n/**\r\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\r\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the popup that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\nexport declare class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase implements AfterViewInit, CanColor {\r\n    /** Reference to the internal calendar component. */\r\n    _calendar: MatCalendar<D>;\r\n    /** Reference to the datepicker that created the overlay. */\r\n    datepicker: MatDatepicker<D>;\r\n    /** Whether the datepicker is above or below the input. */\r\n    _isAbove: boolean;\r\n    constructor(elementRef: ElementRef);\r\n    ngAfterViewInit(): void;\r\n}\r\n/** Component responsible for managing the datepicker popup/dialog. */\r\nexport declare class MatDatepicker<D> implements OnDestroy, CanColor {\r\n    private _dialog;\r\n    private _overlay;\r\n    private _ngZone;\r\n    private _viewContainerRef;\r\n    private _dateAdapter;\r\n    private _dir;\r\n    private _document;\r\n    private _scrollStrategy;\r\n    /** An input indicating the type of the custom header component for the calendar, if set. */\r\n    calendarHeaderComponent: ComponentType<any>;\r\n    /** The date to open the calendar to initially. */\r\n    startAt: D | null;\r\n    private _startAt;\r\n    /** The view that the calendar should start in. */\r\n    startView: 'month' | 'year' | 'multi-year';\r\n    /** Color palette to use on the datepicker's calendar. */\r\n    color: ThemePalette;\r\n    _color: ThemePalette;\r\n    /**\r\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n     * than a popup and elements have more padding to allow for bigger touch targets.\r\n     */\r\n    touchUi: boolean;\r\n    private _touchUi;\r\n    /** Whether the datepicker pop-up should be disabled. */\r\n    disabled: boolean;\r\n    private _disabled;\r\n    /**\r\n     * Emits selected year in multiyear view.\r\n     * This doesn't imply a change on the selected date.\r\n     */\r\n    readonly yearSelected: EventEmitter<D>;\r\n    /**\r\n     * Emits selected month in year view.\r\n     * This doesn't imply a change on the selected date.\r\n     */\r\n    readonly monthSelected: EventEmitter<D>;\r\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\r\n    panelClass: string | string[];\r\n    /** Function that can be used to add custom CSS classes to dates. */\r\n    dateClass: (date: D) => MatCalendarCellCssClasses;\r\n    /** Emits when the datepicker has been opened. */\r\n    openedStream: EventEmitter<void>;\r\n    /** Emits when the datepicker has been closed. */\r\n    closedStream: EventEmitter<void>;\r\n    /** Whether the calendar is open. */\r\n    opened: boolean;\r\n    private _opened;\r\n    /** The id for the datepicker calendar. */\r\n    id: string;\r\n    /** The currently selected date. */\r\n    _selected: D | null;\r\n    private _validSelected;\r\n    /** The minimum selectable date. */\r\n    readonly _minDate: D | null;\r\n    /** The maximum selectable date. */\r\n    readonly _maxDate: D | null;\r\n    readonly _dateFilter: (date: D | null) => boolean;\r\n    /** A reference to the overlay when the calendar is opened as a popup. */\r\n    _popupRef: OverlayRef;\r\n    /** A reference to the dialog when the calendar is opened as a dialog. */\r\n    private _dialogRef;\r\n    /** A portal containing the calendar for this datepicker. */\r\n    private _calendarPortal;\r\n    /** Reference to the component instantiated in popup mode. */\r\n    private _popupComponentRef;\r\n    /** The element that was focused before the datepicker was opened. */\r\n    private _focusedElementBeforeOpen;\r\n    /** Subscription to value changes in the associated input element. */\r\n    private _inputSubscription;\r\n    /** The input element this datepicker is associated with. */\r\n    _datepickerInput: MatDatepickerInput<D>;\r\n    /** Emits when the datepicker is disabled. */\r\n    readonly _disabledChange: Subject<boolean>;\r\n    /** Emits new selected date when selected date changes. */\r\n    readonly _selectedChanged: Subject<D>;\r\n    constructor(_dialog: MatDialog, _overlay: Overlay, _ngZone: NgZone, _viewContainerRef: ViewContainerRef, scrollStrategy: any, _dateAdapter: DateAdapter<D>, _dir: Directionality, _document: any);\r\n    ngOnDestroy(): void;\r\n    /** Selects the given date */\r\n    select(date: D): void;\r\n    /** Emits the selected year in multiyear view */\r\n    _selectYear(normalizedYear: D): void;\r\n    /** Emits selected month in year view */\r\n    _selectMonth(normalizedMonth: D): void;\r\n    /**\r\n     * Register an input with this datepicker.\r\n     * @param input The datepicker input to register with this datepicker.\r\n     */\r\n    _registerInput(input: MatDatepickerInput<D>): void;\r\n    /** Open the calendar. */\r\n    open(): void;\r\n    /** Close the calendar. */\r\n    close(): void;\r\n    /** Open the calendar as a dialog. */\r\n    private _openAsDialog;\r\n    /** Open the calendar as a popup. */\r\n    private _openAsPopup;\r\n    /** Create the popup. */\r\n    private _createPopup;\r\n    /** Create the popup PositionStrategy. */\r\n    private _createPopupPositionStrategy;\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    private _getValidDateOrNull;\r\n    /** Passes the current theme color along to the calendar overlay. */\r\n    private _setColor;\r\n}\r\nexport {};\r\n"]}