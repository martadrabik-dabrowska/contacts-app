{"version":3,"file":"month-view.d.ts","sources":["month-view.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter } from '@angular/core';\r\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses } from './calendar-body';\r\n/**\r\n * An internal component used to display a single month in the datepicker.\r\n * @docs-private\r\n */\r\nexport declare class MatMonthView<D> implements AfterContentInit {\r\n    private _changeDetectorRef;\r\n    private _dateFormats;\r\n    _dateAdapter: DateAdapter<D>;\r\n    private _dir?;\r\n    /**\r\n     * The date to display in this month view (everything other than the month and year is ignored).\r\n     */\r\n    activeDate: D;\r\n    private _activeDate;\r\n    /** The currently selected date. */\r\n    selected: D | null;\r\n    private _selected;\r\n    /** The minimum selectable date. */\r\n    minDate: D | null;\r\n    private _minDate;\r\n    /** The maximum selectable date. */\r\n    maxDate: D | null;\r\n    private _maxDate;\r\n    /** Function used to filter which dates are selectable. */\r\n    dateFilter: (date: D) => boolean;\r\n    /** Function that can be used to add custom CSS classes to dates. */\r\n    dateClass: (date: D) => MatCalendarCellCssClasses;\r\n    /** Emits when a new date is selected. */\r\n    readonly selectedChange: EventEmitter<D | null>;\r\n    /** Emits when any date is selected. */\r\n    readonly _userSelection: EventEmitter<void>;\r\n    /** Emits when any date is activated. */\r\n    readonly activeDateChange: EventEmitter<D>;\r\n    /** The body of calendar table */\r\n    _matCalendarBody: MatCalendarBody;\r\n    /** The label for this month (e.g. \"January 2017\"). */\r\n    _monthLabel: string;\r\n    /** Grid of calendar cells representing the dates of the month. */\r\n    _weeks: MatCalendarCell[][];\r\n    /** The number of blank cells in the first row before the 1st of the month. */\r\n    _firstWeekOffset: number;\r\n    /**\r\n     * The date of the month that the currently selected Date falls on.\r\n     * Null if the currently selected Date is in another month.\r\n     */\r\n    _selectedDate: number | null;\r\n    /** The date of the month that today falls on. Null if today is in another month. */\r\n    _todayDate: number | null;\r\n    /** The names of the weekdays. */\r\n    _weekdays: {\r\n        long: string;\r\n        narrow: string;\r\n    }[];\r\n    constructor(_changeDetectorRef: ChangeDetectorRef, _dateFormats: MatDateFormats, _dateAdapter: DateAdapter<D>, _dir?: Directionality | undefined);\r\n    ngAfterContentInit(): void;\r\n    /** Handles when a new date is selected. */\r\n    _dateSelected(date: number): void;\r\n    /** Handles keydown events on the calendar body when calendar is in month view. */\r\n    _handleCalendarBodyKeydown(event: KeyboardEvent): void;\r\n    /** Initializes this month view. */\r\n    _init(): void;\r\n    /** Focuses the active cell after the microtask queue is empty. */\r\n    _focusActiveCell(): void;\r\n    /** Initializes the weekdays. */\r\n    private _initWeekdays;\r\n    /** Creates MatCalendarCells for the dates in this month. */\r\n    private _createWeekCells;\r\n    /** Date filter for the month */\r\n    private _shouldEnableDate;\r\n    /**\r\n     * Gets the date in this month that the given Date falls on.\r\n     * Returns null if the given Date is in another month.\r\n     */\r\n    private _getDateInCurrentMonth;\r\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\r\n    private _hasSameMonthAndYear;\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    private _getValidDateOrNull;\r\n    /** Determines whether the user has the RTL layout direction. */\r\n    private _isRtl;\r\n}\r\n"]}