{"version":3,"file":"tree.js","sources":["../../../src/material/tree/node.ts","../../../src/material/tree/padding.ts","../../../src/material/tree/outlet.ts","../../../src/material/tree/tree.ts","../../../src/material/tree/toggle.ts","../../../src/material/tree/tree-module.ts","../../../src/material/tree/data-source/flat-data-source.ts","../../../src/material/tree/data-source/nested-data-source.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends CdkNestedTreeNode<T> implements AfterContentInit,\n  OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** Whether the node is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /** Tabindex for the node. */\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  private _tabIndex: number;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]',\n  providers: [{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }]\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n"]}