{"version":3,"file":"grid-list.js","sources":["../../../src/material/grid-list/grid-list-base.ts","../../../src/material/grid-list/grid-tile.ts","../../../src/material/grid-list/tile-coordinator.ts","../../../src/material/grid-list/tile-styler.ts","../../../src/material/grid-list/grid-list.ts","../../../src/material/grid-list/grid-list-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n"]}