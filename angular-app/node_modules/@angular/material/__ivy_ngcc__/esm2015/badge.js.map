{"version":3,"file":"badge.js","sources":["../../../src/material/badge/badge.ts","../../../src/material/badge/badge-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n"]}