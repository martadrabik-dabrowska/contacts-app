{"version":3,"file":"autocomplete.js","sources":["../../../src/material/autocomplete/autocomplete.ts","../../../src/material/autocomplete/autocomplete-origin.ts","../../../src/material/autocomplete/autocomplete-trigger.ts","../../../src/material/autocomplete/autocomplete-module.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {_supportsShadowDom} from '@angular/cdk/platform';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {defer, fromEvent, merge, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {delay, filter, map, switchMap, take, tap} from 'rxjs/operators';\n\nimport {MatAutocomplete} from './autocomplete';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'class': 'mat-autocomplete-trigger',\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, AfterViewInit, OnChanges,\n  OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Whether the element is inside of a ShadowRoot component. */\n  private _isInsideShadowRoot: boolean;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterViewInit() {\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n\n      if (_supportsShadowDom()) {\n        const element = this._element.nativeElement;\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n        // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n        // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n        this._isInsideShadowRoot = rootNode instanceof (window as any).ShadowRoot;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n               fromEvent(this._document, 'click') as Observable<MouseEvent>,\n               fromEvent(this._document, 'touchend') as Observable<TouchEvent>)\n        .pipe(filter(event => {\n          // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n          // fall back to check the first element in the path of the click event.\n          const clickTarget =\n              (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                                                                event.target) as HTMLElement;\n          const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n\n          return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      this.autocomplete._setScrollTop(0);\n    } else {\n      const newScrollPosition = _getOptionScrollPosition(\n        index + labelCount,\n        AUTOCOMPLETE_OPTION_HEIGHT,\n        this.autocomplete._getScrollTop(),\n        AUTOCOMPLETE_PANEL_HEIGHT\n      );\n\n      this.autocomplete._setScrollTop(newScrollPosition);\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n\n          // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const belowPosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const abovePosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n"]}