{"version":3,"file":"expansion.js","sources":["../../../src/material/expansion/accordion-base.ts","../../../src/material/expansion/expansion-animations.ts","../../../src/material/expansion/expansion-panel-content.ts","../../../src/material/expansion/expansion-panel.ts","../../../src/material/expansion/expansion-panel-header.ts","../../../src/material/expansion/accordion.ts","../../../src/material/expansion/expansion-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionTogglePosition} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\nimport {MatAccordionTogglePosition} from './accordion-base';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@.disabled]': '_animationsDisabled',\n    '(@expansionHeight.start)': '_animationStarted()',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  /** Whether Angular animations in the panel header should be disabled. */\n  _animationsDisabled = true;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  _animationStarted() {\n    // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n    // there to work around a bug in Angular (see #13088), however this introduces a different\n    // issue. The new transition will cause the header to animate in on init (see #16067), if the\n    // consumer has set a header height that is different from the default one. We work around it\n    // by disabling animations on the header and re-enabling them after the first animation has run.\n    // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n    // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n    // for https://github.com/angular/angular/issues/18847 to be resolved.\n    this._animationsDisabled = false;\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    this._focusMonitor.focusVia(this._element, origin, options);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n"]}