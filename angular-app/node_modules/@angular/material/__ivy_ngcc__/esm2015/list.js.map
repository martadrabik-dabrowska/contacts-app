{"version":3,"file":"list.js","sources":["../../../src/material/list/list.ts","../../../src/material/list/selection-list.ts","../../../src/material/list/list-module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,MAAM,WAAW,CAAjB;AAAG,CAAiB;AACnB;AAAD,MAAM,iBAAiB,GACnB,kBAAkB,CAAC,WAAW,CAAC,CADnC;AAAE;AAAoD;AAAK;AAClD;AAIT,MAAM,eAAe,CAArB;AAAG,CAAqB;AACvB;AAAD,MAAM,qBAAqB,GACvB,kBAAkB,CAAC,eAAe,CAAC,CADvC;AAiBA,MAAa,UAAW,SAAQ,iBAAiB,CAAjD;AAAG,IAdH,WAAA,GAAA;AAAG;AACiB;AACV;AAGV;AAAa,QAYX,IAAF,CAAA,aAAe,GAAG,IAAI,OAAO,EAAQ,CAAC;AAEtC,KAOC;AAED;AAAS;AACO;AACd,IAXA,WAAW,GAAb;AAAG,QACC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;AAC7B,KAAE;AAEH;AAAS;AACE;AAAS,IADlB,WAAW,GAAb;AAAG,QACC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;AACjC,KAAE;AACF;gCA1BD,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,CAAX,QAAA,EAAA,cAAA,mBACE;OAAQ,EAAE,YAAZ,mBACE,IAAF,EAAA,uBACA,MAAY,EAAZ,YAAA,uBACM,OAAN,EAAA,4BAAA,mBACA,mBACA,QAAA,EAAA,2BAAA,mBACA,MAAA,EAAA,CAAA;;;;;;;;;;;;;;w9XAAA,CAAA,mBACE,MAAF,EAAA,CAAA,eAA0B,CAA1B,mBACE,aAAF,EAAA,iBAAA,CAAA,IAAA,mBACE,eAAF,EAAA,uBAAA,CAAA,MAAA,gBACA,EAAA,EAAA,IACA;;;;0BAAA;AAKA,MAAA,OAAA,SAAA,iBAAA,CAAA;AAAG;AAAS;AAET;AAAS;AACc;AAGlB,QAsBR,IAAA,CAAA,WAAA,GAA0D,WAA1D,CAAA;AAAE;AAAa;AACR;AAED;AACJ;AAAsD,YANxD,WAAA,CAAA,aAAA,CAAA,SAAA,CAAA,GAAA,CAAA,iBAAA,CAAA,CAAA;AAAE,SAKF;AAAE,KACF;AAAE;AAAS;AAAoB;AAAS;AAAsB;AAInD,QAAX,MAAA,QAAA,GAAA,IAAA,CAAA,WAAA,CAAA,aAAA,CAAA,QAAA,CAAA,WAAA,EAAA,CAAA;AAAE;AAAwC,YAC1C,OAAA,MAAqB,CAArB;AAAE,SAEF;AAAE,QACF,IAAM,QAAN,KAAmB,iBAAnB,EAAA;AAAG,YACH,OAAA,aAAA,CAAA;AAAE,SAEF;AAAE,QACF,OAAA,IAAa,CAAb;AAAE,KACF;AAAE;AAEE;AAGF;AAAS;AACG;AAGA,KAJd;AAAE;AAAS;AACE;AAAS;AAGf;AACsB,KAD7B;AAAE,CACF;CACA,OAAA,CAAA,UAAA,GAAA;8BA7CA,QAAA,EAAA,2BAAA,mBACE,IAAF,EAAA,uBACA,OAAA,EAAA,wBAAuC,mBACvC,mBACE,MAAF,EAAA,CAAA;;;gEAKA;AAAE;AAEF,OAAA,CAAA,cAAA,GAAA,MAAiB;AAAG,IACpB,EAAA,IAAA,EAAA,UAAA,EAAA;AAAE;;;;;;;;;+9XARF,CAAA,mBACE,MAAM,EAAR,CAAA,eAAA,CAAA,mBACA,aAAa,EAAb,iBAAA,CAAA,IAAqC,mBACrC,eAAA,EAAA,uBAAA,CAAA,MAAA,gBACA,EAAA,EAAA,IACA;;;;2EAIC;AAAE;AAAK;AAA6E;AAChF;AAAK;AAAmC;4FA0C7C,QAAA,EAAA;OAAA,8EAJA;;;;;;;0BAAA;AAAE;AAAK;AAEc;AAErB;AAAK;AAAiC;0FAUtC,QAAA,EAAA;OAAA,4EAJA;;;;;;;0BAAA;AAAE;AAAK;AAEkB;AAEnB;AAAK;AAGP;+FAOJ,QAAA,EAAA,iCAAA;0EAJA;;;;;;;0BAAA;AAAE;AAAK;AAC8B;AAAK;AAGlC;AAAS;AACjB;AACqC;AAE/B;AACE;AAAS;AACN;AACT;AACyB;AACY,QAmBvC,IAAA,CAAA,UAAA,GACc,IADd,OAAA,EAAA,CAAA;AAAE,QAIE,IAAJ,CAAS,kBAAT,GAAA,CAAA,EAAA,OAAA,KAAA,IAAA,IAAA,IAAA,CAAA,YAAA,EAAA,KAAA,aAAA,CAAA,CAAA,CAAA;AAAE,QAJoB,IAAtB,CAAA,KAAA,GAA8B,OAA9B,IAA8B,IAA9B,CAAA;AAAE;AACwB;AACa;AACtB,QAGb,MAAJ,OAAiB,GAAjB,IAAwB,CAAxB,eAAA,EAAA,CAAA;AAAE;AAE0D;AACvB;AAAW,QAChD,IAAA,IAAA,CAAA,KAAA,EAAoB;AAAG;AAE0B;AACL,YAC5C,IAAA,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,CAAA,SAAA;AAEA;AACM;AAAiB,YACjB,MAAN;AAAG,gBACO,kBAAV,CAAA,YAAA,EAAA,CAAA;AAAE;AAAkB;AAAW,KAA/B;AAAE;AAAS;AAAoB;AAAS,IAItC,kBAAF,GAAA;AAAG;AAGiB;AAAO;AAAS;AAG3B;AACT,IAHE,WAAF,GAAA;AAAG;AAGU;AACS;AAAO;AAG5B;AACD;AAAoB;AACf;AAA2B;AACK;AAGH;AAAO;AAAS;AAEpC;AAAoB;AAC/B;AAEmB;AAA6C;AAAO;CAJ1E,WAAA,CAAA,UAAA,GAAA,OACA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAyB,CAAzB,CAAA,QAAA,EAAA,wDAAA,mBACA,QAAA,EAAA,aAAA;sHAnEA,8BAAA,EAAA,kBAAA,uBACA,mCAAA,EAAA;CAAA,oBACA,mBACE,MAAM,EAAR,CAAA,eAAA,CAAA;aACA,QAAA,EAAA;;;;;;;oBAAA,2EAEA,eAAA,EAAA;OAAA,CAAA,MAAA,gBACA,EAAA,EAAA,IACA;;;;;;;;;;;;;;iFAAA;AAAE;AAEF,WAAA,CAAA,cAAA,GAAe,MAAf;AAAG,IACH,EAAA,IAAA,EAAA,UAAA,EAAA;AAAG,IACH,EAAA,IAAA,EAAA,iBAAA,EAAiB;AAAG,IACpB,EAAA,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,CAAA,EAAA;AACA;AAAyD;AAAI;AACpD,IAzJT,MAAA,EAAE,CAAF,EAAA,IAAA,EAAA,eAAA,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAAG,IAMH,OAAA,EAAA,CAAA,EAAA,IAAA,EAAA,YAAA,EAAA,IAAA,EAAA,CAAA,yBAAA,EAAA,EAAA,MAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA;AAAG,IA8JH,KAAA,EAAA,CAAoC,EAApC,IAAA,EAAA,YAAA,EAAA,IAAA,EAAA,CAAA,uBAAA,EAAA,EAAA,MAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA;AAAE,CACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAA;AAAE;AAAE;AAAK;AACT;AAEW;AAAK;AAAK;AAEhB;AChIL,MAAM,oBAAoB,CAA1B;AAAG,CAA0B;AAC5B;AAAD,MAAM,0BAA0B,GAC5B,kBAAkB,CAAC,oBAAoB,CAAC,CAD5C;AAAE;AAAK;AAAmB;AAI1B,MAAM,iBAAiB,CAAvB;AAAG,CAAuB;AACzB;AAAD,MAAM,uBAAuB,GACzB,kBAAkB,CAAC,iBAAiB,CAAC,CADzC;AAAE;AAAK;AAAmB;AAAc;AAIxC,MAAa,iCAAiC,GAAQ;AACrD,IAAC,OAAO,EAAE,iBAAiB;AAC3B,IAAC,WAAW,EAAE,UAAU;AAAO;AAC/B;AAAS,IADgB,MAAM,gBAAgB,EAAC;AAChD,IAAC,KAAK,EAAE,IAAI;AACZ,CAAA,CAAD;AAAE;AAEC;AACH;AAAA,MAAa,sBAAsB,CAAnC;AAAG;AAAS;AACZ;AACW;AAAS,IADlB,WAAF,CAEW,MAAwB,EAExB,MAAqB,EAJhC;AAAG,QAEQ,IAAX,CAAA,MAAiB,GAAN,MAAM,CAAkB;AACnC,QACW,IAAX,CAAA,MAAiB,GAAN,MAAM,CAAe;AAAE,KAAE;AACnC,CAAA;AAED;AACC;AACC;AACC;AAEH;AA6BA,MAAa,aAAc,SAAQ,uBAAuB,CAA1D;AAAG;AAAS;AAA4B;AACxB;AAAiC;AAAS,IA0DxD,WAAF,CAAsB,QAAiC,EACjC,eAAkC,EAES,aAA+B,EAHhG;AAAG,QAIC,KAAK,EAAE,CAAC;AACX,QALqB,IAAtB,CAAA,QAA8B,GAAR,QAAQ,CAAyB;AACvD,QAAsB,IAAtB,CAAA,eAAqC,GAAf,eAAe,CAAmB;AACxD,QACiE,IAAjE,CAAA,aAA8E,GAAb,aAAa,CAAkB;AAAE,QA3DxF,IAAV,CAAA,SAAmB,GAAG,KAAK,CAAC;AAC3B,QAAS,IAAV,CAAA,SAAmB,GAAG,KAAK,CAAC;AAC3B,QAAS,IAAV,CAAA,SAAmB,GAAG,KAAK,CAAC;AAE5B;AAAa;AACF;AAAa,QAOb,IAAX,CAAA,gBAA2B,GAAuB,OAAO,CAAC;AAE1D,KA+CG;AAEH;AAAS;AAGwB;AAAoB;AAAS,IAnD5D,IACI,KAAK,GADX,EAC8B,OAAO,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;AAC9E;AAAS;AAA4B;AAAoB;AACvD,IADD,IAAI,KAAK,CAAC,QAAsB,EAAlC,EAAsC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,EAAE;AAC9D;AAAS;AAEL;AAAoB;AACpB,IAAH,IACI,KAAK,GADX,EACqB,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;AACzC;AAAS;AACD;AAAoB;AAAS,IADpC,IAAI,KAAK,CAAC,QAAa,EAAzB;AAAG,QACC,IAAI,IAAI,CAAC,QAAQ,IAAI,QAAQ,KAAK,IAAI,CAAC,KAAK,EAAE;AACjD,YAAK,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC3B,SAAI;AAEL,QAAI,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC1B,KAAE;AACF;AAAS;AAEgB;AACrB;AACF,IADD,IACI,QAAQ,GADd,EACmB,OAAO,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,EAAE;AACjG;AAAS;AACJ;AAAoB;AAAS,IADjC,IAAI,QAAQ,CAAC,KAAU,EAAzB;AAAG;AACH,QAAA,MAAU,QAAQ,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAjD;AAAE,QAEE,IAAI,QAAQ,KAAK,IAAI,CAAC,SAAS,EAAE;AACpC,YAAK,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC/B,YAAK,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;AACzC,SAAI;AACJ,KAAE;AAEH;AAAS;AACD;AACS;AAAS,IADxB,IACI,QAAQ,GADd,EAC4B,OAAO,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE;AACxF;AAAS;AACR;AAAoB;AAAS,IAD7B,IAAI,QAAQ,CAAC,KAAc,EAA7B;AAAG;AAA0B,QAC7B,MAAU,UAAU,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAnD;AAAE,QAEE,IAAI,UAAU,KAAK,IAAI,CAAC,SAAS,EAAE;AACtC,YAAK,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;AACnC,YAAK,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE,CAAC;AAC7C,SAAI;AACJ,KAAE;AAEH;AAAS;AAAoB;AAAS,IAOpC,QAAQ,GAAV;AAAG;AACW,QAAd,MAAU,IAAI,GAAG,IAAI,CAAC,aAAa,CAAnC;AAAE,QAEE,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI;AAAO;AAA6B;AAClE;AAAa,QADkB,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,EAAC,EAAE;AACvF,YAAK,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAC7B,SAAI;AAEL;AAA0B,QAA1B,MAAU,WAAW,GAAG,IAAI,CAAC,SAAS,CAAtC;AAAE;AAE2D;AACE;AACS;AACI;AAC7B,QAC3C,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI;AAAO;AACX;AAAa,QADR,MAA3B;AAAG,YACG,IAAI,IAAI,CAAC,SAAS,IAAI,WAAW,EAAE;AACxC,gBAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC5B,gBAAO,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;AAC3C,aAAM;AACN,SAAI,EAAC,CAAC;AACN,KAAE;AAEH;AAAS;AACL;AAAS,IADX,kBAAkB,GAApB;AAAG,QACC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACxC,KAAE;AAEH;AAAS;AACJ;AAAS,IADZ,WAAW,GAAb;AAAG,QACC,IAAI,IAAI,CAAC,QAAQ,EAAE;AACtB;AACO;AACO,YAAT,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI;AAAO;AACT;AAExB,YAH2B,MAA7B;AAAG,gBACK,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC7B,aAAM,EAAC,CAAC;AACR,SAAI;AAEL;AAA0B,QAA1B,MAAU,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAnC;AAAE;AAA0B,QAC5B,MAAU,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAxE;AAAE;AAEU,QACR,IAAI,QAAQ,IAAI,aAAa,EAAE;AAClC,YAAK,aAAa,CAAC,KAAK,EAAE,CAAC;AAC3B,SAAI;AACJ,KAAE;AAEH;AAAS;AACD;AACC;AAAS,IADhB,MAAM,GAAR;AAAG,QACC,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;AAClC,KAAE;AAEH;AAAS;AACD;AACE;AAAS,IADjB,KAAK,GAAP;AAAG,QACC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;AACvC,KAAE;AAEH;AACG;AACG;AAEF;AACK;AAAS,IADhB,QAAQ,GAAV;AAAG,QACC,OAAO,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,WAAW,IAAI,EAAE,IAAI,EAAE,CAAC;AACzE,KAAE;AAEH;AAAS;AACD;AACJ;AAAS,IADX,iBAAiB,GAAnB;AAAG,QACC,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC;AAClF,KAAE;AAEH;AAAS;AACC;AAAS,IADjB,YAAY,GAAd;AAAG,QACC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AACvB,YAAK,IAAI,CAAC,MAAM,EAAE,CAAC;AAEpB;AACO,YAAD,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AAC/C,SAAI;AACJ,KAAE;AAEH;AAAS;AACC;AAAS,IADjB,YAAY,GAAd;AAAG,QACC,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;AAC9C,QAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACzB,KAAE;AAEH;AAAS;AACE;AAAS,IADlB,WAAW,GAAb;AAAG,QACC,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;AACnC,QAAG,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AAC1B,KAAE;AAEH;AAAS;AACD;AAAoB;AAC1B,IADA,eAAe,GAAjB;AAAG,QACC,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;AACtC,KAAE;AAEH;AAAS;AACD;AAA4B;AACzB;AAAS,IADlB,YAAY,CAAC,QAAiB,EAAhC;AAAG,QACC,IAAI,QAAQ,KAAK,IAAI,CAAC,SAAS,EAAE;AACpC,YAAK,OAAO,KAAK,CAAC;AAClB,SAAI;AAEL,QAAI,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAE9B,QAAI,IAAI,QAAQ,EAAE;AACjB,YAAK,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACrD,SAAI;AAAE,aAAI;AACV,YAAK,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACvD,SAAI;AAEL,QAAI,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;AACvC,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AACG;AAEH;AACA;AAAS,IADb,aAAa,GAAf;AAAG,QACC,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;AACvC,KAAE;AACF;mCApND,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,CAAX,QAAA,EAAA,iBAAA,mBACE,QAAQ,EAAE,eAAZ,mBACE,MAAF,EAAU,CAAV,eAAA,CAAA,mBACE,IAAF,EAAA,uBACA;GAAA,EAAA,QAAA;KACM,OAAN,EAAA,+BAAA;kBACI,SAAJ,EAAA,gBAAA,uBACI,QAAJ,EAAA,eAAA,uBACI,SAAS,EAAE,gBAAgB,uBAC3B,UAAU,EAAd,IAAA;aACI,gCAAJ,EAAA,UAAA;SACI,mCAAJ,EAAA,kBAAA;;;;;;;;;;;;6HASI,sBAAsB,EAA1B,UAAA,uBACI;kBAAJ,EAAA,UAAA,oBACA,mBACA,QAAA,EAAA;;;gNAAA,mBACA,aAAA,EAAA,iBAAA;AAAA,IAAA,mBACE,eAAF,EAAA,uBAAA,CAAA,MAAA,gBACA,EAAA,EAAA,IACA;;;;;;;;;;;;;;;;2GAAA;AAAE;AAAoB;AAEd;AAA2B;AACzB,IAxFV,EAAA,IAAA,EAAE,gBAAF,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,UAAA;AAAO;AAEM;AAGR;AAIO;AA4IZ,aAAA,CAAA,cAAA,GAAA;AAAG;AAA+F;AAOhF,IA9DlB,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,eAAA,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,EAAA,CAAA;AAAG,IACH,KAAA,EAAA,CAAA,EAAA,IAAA,EAAG,SAAH,EAAA,IAAA,EAAA,CAAA,MAAA,EAAA,EAAA,MAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAA0C;AAAG,IAC7C,gBAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAkB,EAAlB,CAAA;AAAG,IAGH,KAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAH,EAAA,CAAA;AAAG,IAGH,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;AAAG,IAGH,QAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;AAAG,IAMH,QAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;AAAE,CAYF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAA;AA0BA;AAAK;AACH;AAAK;AAI4B;AAE7B;AAA4B;AAA4B;AAAS;AACnD;AAGpB,QAkMA,IAAA,CAAA,QAAA,GAAuD,QAAvD,CAAA;AAAE;AAAa;AAAmF;AACvF;AAIX;AAAa;AACa;AAAa;AAA4B;AAC3D;AAEyD;AAAa;AAClE;AAAa;AAElB;AAGmC;AAIrC;AAAa;AAAiC;AAA0B;AAC9D;AACD;AAAa;AACP;AAIlB;AAAa;AACiB;AAC7B;AAID;AAEQ;AAEJ;AAAa;AAEb;AAAyB;AAAwB;AAAa;AACjD;AAAa;AACH;AAE5B;AAGmB;AACf;AAI6B;AACxB;AACF;AAAwB;AAAa;AAGhC;AAEH,KA9DV;AAAE;AAAS;AAEU;AAAoB;AACrC;AAEa;AAAS;AAAyB;AAAoB;AAAS;AACzE;AAIP;AACgE;AAGZ;AACI;AAExC,QApCZ,IAAJ,CAAA,oBAAA,EAAA,CAAA;AAAE,KACF;AAAE;AAAS;AAAoB;AAAS;AAA4B;AAGhD,aAyBpB,QAAA,EAAA;AAAE,aACO,aAAT,EAAA;AAAE;AAEe;AACoE,aAArF,aAAA;AAAO;AAAwB;AAAa;AAAuB;AAC7C,QACD,IAArB,IAAA,CAAA,MAAA,EAAA;AAAG,YACH,IAAA,CAAA,qBAAgC,CAAhC,IAAA,CAAA,MAA4C,CAAC,CAA7C;AAAE,SAEF;AAAE;AAEF,QAAA,IAAA,CAAA,eAAA,CAAA,QAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,CAAA,SAAA;AAEA;AAA6B;AAAwB;AAClD;AAAoB;AAAgC,gBAA8B,KAArF,IAAA,IAAA,IAAA,KAAA,CAAA,KAAA,EAAA;AAAG,oBACH,IAAA,CAAA,QAAA,GAAA,IAAA,CAAA;AAAE,iBACF;AAAE,aACF;AAAE,YACF,IAAA,KAAA,CAAA,OAAA,EAAA;AAAG,gBACH,KAAA,IAAA,IAAA,IAAA,KAAA,CAAA,OAAA,EAAA;AAAG,oBAEH,IAAA,CAAA,QAAA,GAAA,KAAA,CAAA;AAAE,iBACF;AAAE,aACF;AAAE,SACF,EAAA,CAAA;AAAE,KACF;AAAE;AACC;AAGc;AAAoB;AAC/B;AAA4B;AACjC,QAFD,MAAA,oBAAA,GAAA,OAAA,CAAA,eAAA,CAAA,CAAA;AAAE;AAA0B,QAC5B,MAAU,YAAV,GAAA,OAAA,CAAiC,OAAO,CAAC,CAAzC;AAAE;AACiB,aAAnB,YAAA,IAAyB,CAAzB,YAAA,CAAA,WAAA,CAAA,EAAA;AAAG,YAEK,IAAR,CAAA,oBAAiC,EAAjC,CAAA;AAAE,SACF;AAAE,KACF;AAAE;AAAS;AAAoB;AAC1B;AAGU;AAEb,QAFF,IAAA,CAAA,UAAA,CAAA,QAAA,EAAA,CAAA;AAAE,QACE,IAAI,CAAC,YAAT,GAAwB,IAAxB,CAAA;AAAE,KACF;AAAE;AAAS;AACI;AAGP;AAAoB;AAC5B;AAAsB;AACmB,KADzC;AAAE;AAAS;AACE;AAAoB;AAAS;AAGlC;AACO,KAAf;AAAE;AAAS;AACsB;AAGxB;AAAS;AAClB;AAC2B,KAD3B;AAAE;AAAS;AAIR;AAA0B;AAAoB;AAC/C;AAAiC;AACO,KAD1C;AAAE;AAAS;AACkC;AAIhC;AAA2C;AAAS;AACvC;AAEjB,QAAT,MAAA,WAAuB,GAAvB,IAA6C,CAA7C,eAAA,CAAA,MAAA,CAAA,CAAA;AAAE;AACc;AAEG,YAAX,IAAR,WAAuB,GAAvB,CAAA,EAAA;AAAG,gBACH,IAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,WAAA,GAAA,CAAA,CAAA,CAAA;AAAE,aACF;AAAE,iBACF,IAAa,WAAW,KAAxB,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,MAAqD,GAAG,CAAC,EAAE;AACzD,gBAAF,IAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,GAAA,CAAA,WAAA,GAAA,CAAA,EAAA,IAAA,CAAA,OAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAE,aAAF;AAAE,SACF;AAAE,QACF,OAAA,IAAA,CAAA,WAAA,CAAA,UAAA,CAAA;AAAE,KACF;AAAE;AAEE;AAGW;AAAyB;AACrC;AAAS;AACZ;AAA0B,QAD1B,MAAA,OAAA,GAAA,KAAA,CAAA,OAAA,CAAA;AAAE;AAA0B,QAC5B,MAAU,OAAO,GAAG,IAApB,CAAyB,WAAzB,CAAA;AAAE;AAA0B,QAC5B,MAAU,kBAAV,GAAA,OAAA,CAAA,eAAA,CAAA;AAAE;AAA0B,QAC5B,MAAU,WAAV,GAAA,cAAsC,CAAC,KAAvC,CAAA,CAAA;AAAE;AAA4B,YAC9B,KAAA,KAAA,CAAA;AAAE,YAEF,KAAA,KAAA;AAAG,gBACH,IAAA,CAAA,WAAA,EAAA;AAAG,oBACH,IAAA,CAAA,oBAAA,EAAA,CAAA;AAAE;AAGS,oBADD,KAAK,CAAf,cAAA,EAAA,CAAA;AAAE,iBACF;AAAE,gBACF,MAAA;AAAE,YACF,KAAS,IAAT,CAAA;AAAE,YACF,KAAA,GAAA;AAAG,gBACH,IAAA,CAAe,WAAf,EAAA;AAAG,oBACW,OAAd,KAAA,IAAA,GAAA,OAAA,CAAA,kBAAA,EAAA,GAAA,OAAA,CAAA,iBAAA,EAAA,CAAA;AAAE,oBACU,KAAZ,CAAA,cAAA,EAAA,CAAA;AAAE,iBACF;AAAE,gBACF,MAAA;AAAE,YACF,KAAS,CAAT;AAAG,gBACK,IAAR,cAAA,CAAA,KAAA,EAAA,SAAA,CAAA,EAAA;AAAG,oBACH,IAAA,CAAA,OAAA,CAAA,IAAA;AAAO;AAC4B;AACZ;AAAyB;AAExC;AAGK,iBALb;AAAE,gBACF,MAAA;AAAE,YACF;AACA,gBAAQ,OAAR,CAAA,SAAA,CAAA,KAAA,CAAA,CAAA;AAAE,SACF;AAAE,QACF,IAAA,CAAA,OAAA,KAAA,QAAyB,IAAzB,OAAA,KAAA,UAAA,KAAA,KAAA,CAAA,QAAA;AAAK,YACL,OAAA,CAAA,eAAA,KAAA,kBAAA,EAAA;AAAG,YAEK,IAAR,CAAA,oBAAiC,EAAjC,CAAA;AAAE,SACF;AAAE,KACF;AAAE;AAAS;AAIa;AAAoB;AAAS;AAChC;AAEpB;AACK;AACK,QAFP,IAAJ,IAAA,CAAA,OAAA,IAAA,CAAA,IAAA,CAAA,YAAA,EAAA;AAAG;AAA8B,YAEzB,MAAR,KAAA,GAAA,IAAA,CAAA,wBAAA,EAAA,CAAA;AAAE;AAAoC,YACtC,IAAA,CAAA,MAAiB,GAAG,KAAK,CAAzB;AAAE,SACF;AAAE,KACF;AAAE;AAAS;AAImC;AAA0B;AACtD;AAAS;AACZ;AAGA,KAJf;AAAE;AAAS;AACS;AAA0B;AAAoB;AAChE;AAEqB;AACvB,QAAA,IAAA,IAAA,CAAA,OAAA,EAAA;AAAG,YACK,IAAR,CAAA,qBAAA,CAAA,MAAA,IAAA,EAAA,CAAA,CAAA;AAAE,SAEF;AAAE,KACF;AAAE;AAAS;AAIJ;AAA8B;AACpC;AAAS;AAAoC;AAE3C,KAFH;AAAE;AAAS;AACK;AAGf;AAAoB;AAAS;AAC1B;AAA8B,KAAlC;AAAE;AAAS;AACA;AAGR;AAAoB;AAAS;AACzB;AAA+B,KAAtC;AAAE;AAAS;AAIV;AAAiB;AAA0B;AAAoB;AACzD;AAAqC;AACjB;AAA8B;AAEzC;AAAa;AACmB;AACnC;AAA6B;AAAwB;AAAa;AAClE;AAA8B,YAH3C,MAAA,mBAAA,GAAA,IAAA,CAAA,OAAA,CAAA,IAAA;AAAO;AACI;AAA4B;AAAiB;AACvC;AACS;AACS,gBAF3B,OAAR,MAAA,CAAA,QAAA,GAAA,KAAA,GAAA,IAAA,CAAA,WAAA,CAAA,MAAA,CAAA,KAAA,EAAA,KAAA,CAAA,CAAA;AAAE,aACF,EAAA,CAAQ;AAAE,YACV,IAAQ,mBAAR,EAAA;AAAG,gBACH,mBAAA,CAAA,YAAA,CAAA,IAAA,CAAA,CAAA;AAAE,aAEF;AAAE,SACF,EAAA,CAAA;AAAE,KACF;AAAE;AACC;AAGuC;AACpC;AAAoB;AAAS;AACf;AAAyC;AAE7D;AACuB;AAAa;AACzB;AACX;AAAwB;AAAa;AAEvB;AAAO;AAAS;AACE;AAAiB;AAAoB;AAAS;AAElD;AAC5B,QAPA,IAAA,YAA8B,GAA9B,IAAA,CAAA,WAAA,CAAA,eAAA,CAAA;AAAE;AACgC;AAE5B,YAAE,IAAR,aAAA,GAA4B,IAAI,CAAhC,OAAA,CAAA,OAAA,EAAkD,CAAC,YAAY,CAAC,CAAhE;AAAE;AAA6D,gBACrD,aAAa,CAAvB,MAA6C,EAA7C,CAAA;AAAE;AAEkB;AAAiC,gBAG7C,IAAR,CAAA,gBAAA,CAAA,aAAA,CAAA,CAAA;AAAE,aACF;AAAE,SACF;AAAE,KACF;AAAE;AACC;AAIqC;AACH;AAElC;AAA8B;AAAoB;AAC/C;AAA0C;AACK;AAGxB;AACX;AACZ;AAEA;AAGD;AAAwB;AAE1B;AAGU;AACM,gBAbnB,UAAA,GAAA,IAAA,CAAA;AAAE,aACF;AAAE,SACF,EAAA,CAAA;AAAE,QACF,IAAA,UAAA,EAAA;AAAG,YACI,IAAP,CAAA,kBAAA,EAAA,CAAA;AAAE,SAEF;AAAE,KACF;AAAE;AAAS;AAKD;AAAiB;AACI;AAC6B;AACzD;AACsB;AACS,KADlC;AAAE;AAAS;AACM;AAAiB;AAGjC;AAAoB;AAAS;AAC1B;AACH,KADD;AAAE;AAAS;AACmB;AAAiB;AAGpC;AAAS;AAA8B;AAClD,YAAA,IAAA,CAAA,OAA8B,CAA9B,OAAA;AAAO;AACD;AACI;AAAiB;AAIzB;AAAW,KAJb;AAAE,CACF;CACA,gBAAA,CAAA,UAAA,GAAA,kIArUA,MAAA,EAAA,CAAA;AAAA,CAAA,mBACE,IAAF,EAAA,uBACA,MAAY,EAAZ,SAAA,uBACA,YAAA,EAAA,UAA8B,uBAC9B,OAAA,EAAA,kCAAA,uBACM;MAAN,EAAA,cAAA,uBACI,WAAJ,EAAA;iBAAA;;IACI,sBAAJ,EAA4B,MAA5B,uBACI,sBAAJ;CAAA,qBAAA,oBACA,mBACA,QAAA,EAAA,2BAAA,mBACA,MAAA,EAAA,CAAA;;;;;;;;gEAKA;AAAE;AAEF,gBAAE,CAAF,cAAiB,GAAjB,MAAA;AAAG,IACH,EAAA,IAAA,EAAA,UAAA,EAAA;AACA;AAA8E;AAAI;AACzD,IAzSzB,OAAA,EAAA,CAAA,EAAA,IAAA,EAAY,eAAZ,EAAA,IAAA,EAAA,CAAA,aAAA,EAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAAG,IAkWH,eAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,CAAA;AAAG;AAAkC;AAA+B,IAnDpE,WAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;AAAG,IAGH,QAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAG,CAAH;AAAE,CAIF;;;;;;;;;;;;;;;;ihVAvBA,CAAA,mBACA,aAAA,EAAA,iBAAA,CAAA,IAAA,mBACA,SAAA,EAAA,CAAA,iCAAA,CAAA,mBACE,eAAF,EAAA,uBAAA,CAAA,MAAA,eACA,EAAA,EAAA,IACA;;;;;;;;;;;;;;;;;;;;oBAkBA;AAAE;AAAE;AAAK;AAEC;AACuB;AC/RjC,MAAa,aAAa,CAA1B;AAAG;mCA3BH,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU,mBACR,OAAO,EAAE,CAAC;OAAa,EAAE,eAAe,EAAE,eAAe,EAAE,uBAAuB,EAAE;SAAY,CAAC,mBACjG,OAAO,EAAE,uBACP,OAAO,uBACP,UAAU,uBACV,WAAW,uBACX;qBAAyB;mBACzB,aAAa;sBACb;OAAe,uBACf,uBAAuB,uBACvB,4BAA4B,uBAC5B,uBAAuB,uBACvB,gBAAgB,uBAChB,aAAa,uBACb,gBAAgB,mBACjB,mBACD,YAAY,EAAE,uBACZ,OAAO,uBACP,UAAU,uBACV,WAAW,uBACX,yBAAyB,uBACzB,uBAAuB;EACvB,4BAA4B,uBAC5B,gBAAgB,uBAChB,aAAa,mBACd,gBACF,EAAD,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BACE;AAAE;AAAE;AAAK;AACK;AAAsH;AAAK;AAAE;AAAK;AAAmC;AAAsH;AAAK;AAAE;AAA2O","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme.\n    '[class.mat-primary]': 'color === \"primary\"',\n    // Even though accent is the default, we need to set this class anyway, because the  list might\n    // be placed inside a parent that has one of the other colors with a higher specificity.\n    '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple,\n  AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.onChange.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n"]}