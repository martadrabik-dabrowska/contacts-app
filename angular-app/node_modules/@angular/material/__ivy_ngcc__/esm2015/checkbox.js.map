{"version":3,"file":"checkbox.js","sources":["../../../src/material/checkbox/checkbox-config.ts","../../../src/material/checkbox/checkbox.ts","../../../src/material/checkbox/checkbox-required-validator.ts","../../../src/material/checkbox/checkbox-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple,\n    FocusableOption {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin: FocusOrigin = 'keyboard', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, origin, options);\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n"]}