{"version":3,"file":"button-toggle.js","sources":["../../../src/material/button-toggle/button-toggle.ts","../../../src/material/button-toggle/button-toggle-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle,\n                    select: boolean,\n                    isUserInput = false,\n                    deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (this._selectionModel) {\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      }\n    } else {\n      deferEvents = true;\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel && this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(options?: FocusOptions): void {\n    this._buttonElement.nativeElement.focus(options);\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n"]}