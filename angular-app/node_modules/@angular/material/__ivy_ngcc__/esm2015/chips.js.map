{"version":3,"file":"chips.js","sources":["../../../src/material/chips/chip.ts","../../../src/material/chips/chip-default-options.ts","../../../src/material/chips/chip-list.ts","../../../src/material/chips/chip-input.ts","../../../src/material/chips/chips-module.ts"],"names":["nextUniqueId"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value !== undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              // @breaking-change 8.0.0 `animationMode` parameter to become required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              // @breaking-change 9.0.0 `_changeDetectorRef` parameter to become required.\n              private _changeDetectorRef?: ChangeDetectorRef) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n      this._markForCheck();\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    this._markForCheck();\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n\n  private _markForCheck() {\n    // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(options?: FocusOptions): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput(options?: FocusOptions) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._inputElement.focus(options);\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n"]}