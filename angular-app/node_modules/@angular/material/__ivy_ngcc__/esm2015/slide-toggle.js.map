{"version":3,"file":"slide-toggle.js","sources":["../../../src/material/slide-toggle/slide-toggle-config.ts","../../../src/material/slide-toggle/slide-toggle.ts","../../../src/material/slide-toggle/slide-toggle-required-validator.ts","../../../src/material/slide-toggle/slide-toggle-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n@Directive({\n  selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n  providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n})\nexport class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\nimport {MatSlideToggleRequiredValidator} from './slide-toggle-required-validator';\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n@NgModule({\n  exports: [MatSlideToggleRequiredValidator],\n  declarations: [MatSlideToggleRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatSlideToggleRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatRippleModule,\n    MatCommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatSlideToggle,\n    MatCommonModule\n  ],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n"]}