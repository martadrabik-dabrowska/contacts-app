{"version":3,"file":"input.js","sources":["../../../src/material/input/autosize.ts","../../../src/material/input/input-errors.ts","../../../src/material/input/input-value-accessor.ts","../../../src/material/input/input.ts","../../../src/material/input/input-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n"]}