{"version":3,"file":"sort.js","sources":["../../../src/material/sort/sort-errors.ts","../../../src/material/sort/sort.ts","../../../src/material/sort/sort-animations.ts","../../../src/material/sort/sort-header-intl.ts","../../../src/material/sort/sort-header.ts","../../../src/material/sort/sort-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n"]}