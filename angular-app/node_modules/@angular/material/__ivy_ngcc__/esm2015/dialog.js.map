{"version":3,"file":"dialog.js","sources":["../../../src/material/dialog/dialog-config.ts","../../../src/material/dialog/dialog-animations.ts","../../../src/material/dialog/dialog-container.ts","../../../src/material/dialog/dialog-ref.ts","../../../src/material/dialog/dialog.ts","../../../src/material/dialog/dialog-content-directives.ts","../../../src/material/dialog/dialog-module.ts"],"names":["state","observableOf"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,MAAa,eAAe,CAA5B;AAAG,IAAH,WAAA,GAAA;AAAG;AAAa;AAGE;AAAa,QAW7B,IAAF,CAAA,IAAM,GAAgB,QAAQ,CAAC;AAE/B;AAAa;AACG;AAAa,QAA3B,IAAF,CAAA,UAAY,GAAuB,EAAE,CAAC;AAEtC;AAAa;AACG;AAAa,QAA3B,IAAF,CAAA,WAAa,GAAa,IAAI,CAAC;AAE/B;AAAa;AACG;AAAa,QAA3B,IAAF,CAAA,aAAe,GAAY,EAAE,CAAC;AAE9B;AAAa;AACG;AAAa,QAA3B,IAAF,CAAA,YAAc,GAAa,KAAK,CAAC;AAEjC;AAAa;AACG;AAEX,QAFH,IAAF,CAAA,KAAO,GAAY,EAAE,CAAC;AAEtB;AAAa;AACG;AAEZ,QAFF,IAAF,CAAA,MAAQ,GAAY,EAAE,CAAC;AAEvB;AAAa;AAGV;AAAa,QAId,IAAF,CAAA,QAAU,GAAqB,MAAM,CAAC;AAEtC;AAAa;AAA0D;AACpE,QAMD,IAAF,CAAA,IAAM,GAAc,IAAI,CAAC;AAEzB;AAAa;AACK;AAEb,QACH,IAAF,CAAA,eAAiB,GAAmB,IAAI,CAAC;AAEzC;AAAa;AACG;AAAa,QAA3B,IAAF,CAAA,cAAgB,GAAmB,IAAI,CAAC;AAExC;AAAa;AACG;AAAa,QAA3B,IAAF,CAAA,SAAW,GAAmB,IAAI,CAAC;AAEnC;AAAa;AACG;AAAa,QAA3B,IAAF,CAAA,SAAW,GAAa,IAAI,CAAC;AAE7B;AACO;AACO;AAEC;AAAa,QAA1B,IAAF,CAAA,YAAc,GAAa,IAAI,CAAC;AAEhC;AAAa;AAIA;AACQ;AAAyC;AAAa,QAGzE,IAAF,CAAA,iBAAmB,GAAa,IAAI,CAAC;AAErC;AAAmF,KAIlF;AACA,CADA;AACA;AAAE;AAAK;AAAmC;AAAsH;AAAK;ACzGtK,MAAM,aAAa,GAAG;AACrB;AACG;AACG;AACG,IAAR,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,EAAC,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,YAAY,EAAC,CAAC,CAAC;AAClE,IAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,EAAC,SAAS,EAAE,MAAM,EAAC,CAAC,CAAC;AAC3C,IAAC,UAAU,CAAC,YAAY,EAAE,OAAO,CAAC,kCAAkC,EAC/D,KAAK,CAAC,EAAC,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC;AAC7C,IAAC,UAAU,CAAC,sBAAsB,EAC7B,OAAO,CAAC,qCAAqC,EAAE,KAAK,CAAC,EAAC,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC;AACzE,CAAA,CAAD;AAAE;AAEC;AAEH;AACE;AACU;AAAZ,MAAa,mBAAmB,GAG5B;AACH;AAAS;AACD;AAAS,IAAhB,eAAe,EAAE,OAAO,CAAC,iBAAiB,EAAE,aAAa,CAAC;AAE5D;AAAS;AACA;AAAS,IAAhB,WAAW,EAAE,OAAO,CAAC,aAAa,EAAE,aAAa,CAAC;AACnD,CAAA;AACA;AAAE;AAAK;AAAmC;AAAsH;AAAK;AAAK;AAA+D;AAAqD;AAAmB;AAAgB;ACHlU,SAAgB,yCAAyC,GAAzD;AAAG,IACD,MAAM,KAAK,CAAC,uEAAuE,CAAC,CAAC;AACtF,CAAA;AAED;AACC;AACC;AACC;AAEF;AAwBD,MAAa,kBAAmB,SAAQ,gBAAgB,CAAxD;AAAG;AAAS;AAA+B;AACtB;AAAsC;AAA6B;AACvE;AAAS,IAoBxB,WAAF,CACY,WAAuB,EACvB,iBAAmC,EACnC,kBAAqC,EACP,SAAc,EAE7C,OAAwB,EANnC;AAAG,QAQC,KAAK,EAAE,CAAC;AACX,QARW,IAAZ,CAAA,WAAuB,GAAX,WAAW,CAAY;AACnC,QAAY,IAAZ,CAAA,iBAA6B,GAAjB,iBAAiB,CAAkB;AAC/C,QAAY,IAAZ,CAAA,kBAA8B,GAAlB,kBAAkB,CAAmB;AACjD,QAA0C,IAA1C,CAAA,SAAmD,GAAT,SAAS,CAAK;AACxD,QACW,IAAX,CAAA,OAAkB,GAAP,OAAO,CAAiB;AAAE;AAE3B;AAKiB;AAAa,QA3B9B,IAAV,CAAA,oCAA8C,GAAuB,IAAI,CAAC;AAE1E;AAAa;AACG;AAAa,QAA3B,IAAF,CAAA,MAAQ,GAA8B,OAAO,CAAC;AAE9C;AAAa;AACG;AAAa,QAA3B,IAAF,CAAA,sBAAwB,GAAG,IAAI,YAAY,EAAkB,CAAC;AAE9D,QAeI,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,cAAc,IAAI,IAAI,CAAC;AACzD,KAAE;AAEH;AACG;AACG;AAAoB;AAEC;AAAoB;AAAS,IAAtD,qBAAqB,CAAI,MAA0B,EAArD;AAAG,QACC,IAAI,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE;AACzC,YAAK,yCAAyC,EAAE,CAAC;AACjD,SAAI;AAEL,QAAI,IAAI,CAAC,6BAA6B,EAAE,CAAC;AACxC,QAAG,OAAO,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;AAC3D,KAAE;AAEH;AACG;AACG;AAAoB;AAEC;AAAoB;AAAS,IAAtD,oBAAoB,CAAI,MAAyB,EAAnD;AAAG,QACC,IAAI,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE;AACzC,YAAK,yCAAyC,EAAE,CAAC;AACjD,SAAI;AAEL,QAAI,IAAI,CAAC,6BAA6B,EAAE,CAAC;AACxC,QAAG,OAAO,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;AAC1D,KAAE;AAEH;AAAS;AACD;AACR;AAAoB;AAAS,IADnB,UAAU,GAApB;AAAG;AACC,QAAJ,MAAU,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAlD;AAAE,QAEE,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;AACzB,YAAK,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAC9D,SAAI;AAEL;AACK;AACK;AACK,QAAX,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;AAC/B,YAAK,IAAI,CAAC,UAAU,CAAC,4BAA4B,EAAE,CAAC;AACpD,SAAI;AAAE,aAAI;AACV;AAA8B,YAA/B,MAAY,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAxD;AAAE;AAE4C;AACP;AACoB;AACO;AACrB,YACvC,IAAI,aAAa,KAAK,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;AACxE,gBAAO,OAAO,CAAC,KAAK,EAAE,CAAC;AACvB,aAAM;AACN,SAAI;AACJ,KAAE;AAEH;AAAS;AACD;AAAiB;AACR;AAAS,IADhB,aAAa,GAAvB;AAAG;AACF,QAAD,MAAU,OAAO,GAAG,IAAI,CAAC,oCAAoC,CAA7D;AAAE;AAEmC,QACjC,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,OAAO,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,UAAU,EAAE;AACpF,YAAK,OAAO,CAAC,KAAK,EAAE,CAAC;AACrB,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,UAAU,EAAE;AACxB,YAAK,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;AAC/B,SAAI;AACJ,KAAE;AAEH;AAAS;AACD;AAAiB;AACxB;AAAS,IADA,6BAA6B,GAAvC;AAAG,QACC,IAAI,IAAI,CAAC,SAAS,EAAE;AACvB,YAAK,IAAI,CAAC,oCAAoC,sBAAG,IAAI,CAAC,SAAS,CAAC,aAAa,EAAe,CAAC;AAE9F;AACO,YAAD,IAAI,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE;AAC/C;AACS;AACS;AACS,gBAApB,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI;AAAO;AAAgC;AAEjE,gBAF2B,MAAM,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,EAAC,CAAC;AAC5E,aAAM;AACN,SAAI;AACJ,KAAE;AAEH;AAAS;AACD;AAAyB;AACxB;AAAS,IADhB,gBAAgB,CAAC,KAAqB,EAAxC;AAAG,QACC,IAAI,KAAK,CAAC,OAAO,KAAK,OAAO,EAAE;AAClC,YAAK,IAAI,CAAC,UAAU,EAAE,CAAC;AACvB,SAAI;AAAE,aAAI,IAAI,KAAK,CAAC,OAAO,KAAK,MAAM,EAAE;AACxC,YAAK,IAAI,CAAC,aAAa,EAAE,CAAC;AAC1B,SAAI;AAEL,QAAI,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC3C,KAAE;AAEH;AAAS;AACD;AAAyB;AACzB;AAAS,IADf,iBAAiB,CAAC,KAAqB,EAAzC;AAAG,QACC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC3C,KAAE;AAEH;AAAS;AACD;AAAoB;AACvB,IADH,mBAAmB,GAArB;AAAG,QACC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AAEzB;AACK;AACK,QAAN,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;AAC1C,KAAE;AACF;wCApKD,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,CAAX,QAAA,EAAA,sBAAA,mBACE,QAAQ,EAAE,6CAAZ,mBACE,MAAF,EAAU,CAAV;;;;;;;0IAAA,CAAA,mBACE,aAAa,EAAf,iBAAA,CAAA,IAAA;;6JAKE,IAAF,EAAA,uBACA,OAAA,EAAe,sBAAf;MACM,UAAN,EAAA,IAAA,uBACI,YAAJ,EAAA,MAAA;gBACI,WAAJ,EAAA,KAAA,uBACI,aAAJ,EAAA,cAAA,uBACI,wBAAJ,EAAA,4CAAA;oBACI,mBAAJ,EAAA,mBAAA,uBACI;WAAJ,EAAA,iCAAA,uBACI,oBAAJ,EAAA,QAAA,uBACI,0BAAJ,EAAA,2BAAA,uBACI,yBAAJ,EAAA,0BAAA,oBACA,gBACA,EAAA,EAAA,IACA,upBAAA;AAAE;AAEY;AACd;AAA2B;AAAiC,IA9D5D,EAAA,IAAA,EAAE,iBAAF,EAAA;AAAG,IAmBH,EAAA,IAAA,EAAmB,SAAnB,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,QAAA,EAAA,EAAA,CAAA,EAAA;AAAG,IAdH,EAAA,IAAA,EAAE,eAAF,EAAmB;AACnB,CAiFA,CAAA;AAnEA,kBAAA,CAAA,cAAA,GAAA;AAAG;AAI+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAE;AAAE;AAAK;AAC3B;AAIjB;AAAK;AAA6B;AAAmC;ACpBtE,IAAI,QAAQ,GAAG,CAAC,CAAhB;AAAE;AAAK;AAEyC;AAClC;AAKd,MAAa,YAAY,CAAzB;AAAG;AAAS;AACT;AAAsC;AAC7B;AAEF;AAAS,IAqBjB,WAAF,CACY,WAAuB,EACxB,kBAAsC;AAC/C;AACC,IAAC,SAAoB,EACX,EADb,GAC0B,CAD1B,WAAA,EACwC,QAAQ,EAAE,CADlD,CACoD,EADpD;AAAG,QAHS,IAAZ,CAAA,WAAuB,GAAX,WAAW,CAAY;AACnC,QAAW,IAAX,CAAA,kBAA6B,GAAlB,kBAAkB,CAAoB;AACjD,QAEa,IAAb,CAAA,EAAe,GAAF,EAAE,CAAqC;AAAE;AAE5C;AACkB;AAErB,QA9BL,IAAF,CAAA,YAAc,GAAwB,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,YAAY,CAAC;AAEnF;AAAa;AACG;AAAa,QAAV,IAAnB,CAAA,YAA+B,GAAG,IAAI,OAAO,EAAQ,CAAC;AAEtD;AAAa;AACG;AAAa,QAAV,IAAnB,CAAA,YAA+B,GAAG,IAAI,OAAO,EAAiB,CAAC;AAE/D;AAAa;AACG;AAAa,QAAV,IAAnB,CAAA,aAAgC,GAAG,IAAI,OAAO,EAAiB,CAAC;AAEhE;AAAa;AACJ;AAAa,QAMZ,IAAV,CAAA,MAAgB,GAAhB,CAAA,YAAuC;AAEvC;AACiC,QAO7B,kBAAkB,CAAC,GAAG,GAAG,EAAE,CAAC;AAEhC;AACK,QAAD,kBAAkB,CAAC,sBAAsB,CAAC,IAAI,CAC5C,MAAM;AAAO;AAA6B;AAAwB;AACnE,QADQ,KAAK,IAAI,KAAK,CAAC,SAAS,KAAK,MAAM,IAAI,KAAK,CAAC,OAAO,KAAK,OAAO,EAAC,EACxE,IAAI,CAAC,CAAC,CAAC,CACR;AACJ,aAAI,SAAS;AAAO;AACC;AACnB,QAFY,MAAf;AAAG,YACG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;AAC9B,YAAK,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;AAClC,SAAI,EAAC,CAAC;AAEP;AACK,QAAD,kBAAkB,CAAC,sBAAsB,CAAC,IAAI,CAC5C,MAAM;AAAO;AAA6B;AAAwB;AAClE,QADO,KAAK,IAAI,KAAK,CAAC,SAAS,KAAK,MAAM,IAAI,KAAK,CAAC,OAAO,KAAK,MAAM,EAAC,EACvE,IAAI,CAAC,CAAC,CAAC,CACR,CAAC,SAAS;AAAO;AACA;AAAa,QADnB,MAAhB;AAAG,YACG,YAAY,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;AAC9C,YAAK,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;AAChC,SAAI,EAAC,CAAC;AAEP,QAAI,WAAW,CAAC,WAAW,EAAE,CAAC,SAAS;AAAO;AACxB;AAAa,QADK,MAAxC;AAAG,YACG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC3C,YAAK,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;AACnC,YAAK,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC1C,YAAK,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;AAClC,YAAK,IAAI,CAAC,iBAAiB,sBAAG,IAAI,EAAC,CAAC;AACpC,YAAK,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;AAChC,SAAI,EAAC,CAAC;AAEP,QAAI,WAAW,CAAC,aAAa,EAAE;AAC9B,aAAM,IAAI,CAAC,MAAM;AAAO;AACD;AAAwB;AAAa,QAD1C,KAAK,IAAxB;AAAG,YACK,OAAO,KAAK,CAAC,OAAO,KAAK,MAAM,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;AACvF,SAAM,EAAC,CAAC;AACR,aAAM,SAAS;AAAO;AACC;AACR;AACT,QAHU,KAAK,IAAtB;AAAG,YACK,KAAK,CAAC,cAAc,EAAE,CAAC;AAC9B,YAAO,IAAI,CAAC,KAAK,EAAE,CAAC;AACpB,SAAM,EAAC,CAAC;AACR,KAAE;AAEH;AACG;AACG;AAEE;AAAoB;AACzB,IADD,KAAK,CAAC,YAAgB,EAAxB;AAAG,QACC,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC;AAEhC;AACK,QAAD,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,IAAI,CACjD,MAAM;AAAO;AAA6B;AAGhD;AAAa,QAHA,KAAK,IAAI,KAAK,CAAC,SAAS,KAAK,OAAO,EAAC,EAC5C,IAAI,CAAC,CAAC,CAAC,CACR;AACJ,aAAI,SAAS;AAAO;AACG;AACrB;AAAa,QAFD,KAAK,IAApB;AAAG,YACG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC3C,YAAK,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;AACnC,YAAK,IAAI,CAAC,MAAM,GAAjB,CAAA,cAA0C;AACzC,YAAK,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;AAExC;AACO;AACO;AACO;AACO;AACO,YAA7B,IAAI,CAAC,qBAAqB,GAAG,UAAU;AAAO;AAC1B;AACnB,YAFuC,MAA9C;AAAG,gBACK,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;AAClC,aAAM,GAAE,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC;AAC/B,SAAI,EAAC,CAAC;AAEP,QAAI,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,EAAE,CAAC;AACjD,QAAG,IAAI,CAAC,MAAM,GAAf,CAAA,eAAyC;AACxC,KAAE;AAEH;AACG;AAEH;AAAoB;AAAS,IAA3B,WAAW,GAAb;AAAG,QACC,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;AAC3C,KAAE;AAEH;AACG;AAEH;AAAoB;AAAS,IAA3B,WAAW,GAAb;AAAG,QACC,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;AAC3C,KAAE;AAEH;AACG;AAEH;AAAoB;AAAS,IAA3B,YAAY,GAAd;AAAG,QACC,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;AAC5C,KAAE;AAEH;AACG;AAEH;AAAoB;AAAS,IAA3B,aAAa,GAAf;AAAG,QACC,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC;AAC3C,KAAE;AAEH;AACG;AAEH;AAAoB;AAAS,IAA3B,aAAa,GAAf;AAAG,QACC,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC;AAC3C,KAAE;AAEH;AACG;AACG;AAAuB;AAE3B;AACF;AAAuB;AAAS,IAD9B,cAAc,CAAC,QAAyB,EAA1C;AAAG;AAA0B,QAC7B,IAAQ,QAAQ,GAAG,mBAAA,IAAI,GAAC,oBAAoB,EAAE,CAA9C;AAAE,QAEE,IAAI,QAAQ,KAAK,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;AACtD,YAAK,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACnF,SAAI;AAAE,aAAI;AACV,YAAK,QAAQ,CAAC,kBAAkB,EAAE,CAAC;AACnC,SAAI;AAEL,QAAI,IAAI,QAAQ,KAAK,QAAQ,CAAC,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;AACtD,YAAK,QAAQ,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAClF,SAAI;AAAE,aAAI;AACV,YAAK,QAAQ,CAAC,gBAAgB,EAAE,CAAC;AACjC,SAAI;AAEL,QAAI,mBAAA,IAAI,GAAC,WAAW,CAAC,cAAc,EAAE,CAAC;AAEtC,QAAI,0BAAO,IAAI,GAAC;AACf,KAAE;AAEH;AACG;AACG;AAAuB;AACtB;AAEA;AAAqD;AACvC;AAAS,IAD5B,UAAU,CAAC,KAAb,GAA6B,EAAE,EAAE,MAAjC,GAAkD,EAAE,EAApD;AAAG,QACC,mBAAA,IAAI,GAAC,oBAAoB,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC3D,QAAG,mBAAA,IAAI,GAAC,WAAW,CAAC,cAAc,EAAE,CAAC;AACrC,QAAG,0BAAO,IAAI,GAAC;AACf,KAAE;AAEH;AAAS;AACD;AAAuB;AAC/B;AAA2B;AACtB;AAAS,IAFZ,aAAa,CAAC,OAA0B,EAA1C;AAAG,QACC,mBAAA,IAAI,GAAC,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AAC3C,QAAG,0BAAO,IAAI,GAAC;AACf,KAAE;AAEH;AAAS;AACD;AAAuB;AAAqB;AAC5B;AAAuB;AACvC,IAFN,gBAAgB,CAAC,OAA0B,EAA7C;AAAG,QACC,mBAAA,IAAI,GAAC,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;AAC9C,QAAG,0BAAO,IAAI,GAAC;AACf,KAAE;AAEH;AACG;AACG;AACG;AAEF;AAAoB;AACzB,IADA,SAAS,GAAX;AAAG,QACC,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;AAC7B,KAAE;AAEH;AACG;AACG;AACG;AAEF;AAAoB;AAAS,IAAlC,WAAW,GAAb;AAAG,QACC,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC;AAC9B,KAAE;AAEH;AAAS;AACD;AAAoB;AACtB,IADJ,QAAQ,GAAV;AAAG,QACC,OAAO,IAAI,CAAC,MAAM,CAAC;AACtB,KAAE;AAEH;AAAS;AACD;AAAiB;AAAoB;AAAS,IAA5C,oBAAoB,GAA9B;AAAG,QACC,0BAAO,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,gBAAgB,GAA2B;AAClF,KAAE;AACF,CAAA;AACA;AAAE;AAAK;AAAmC;AAAsH;AAAK;AAAK;AAAwF;AAAc;AC/MjR,MAAa,eAAe,GAAG,IAAI,cAAc,CAAM,eAAe,CAAC,CAAvE;AAAE;AAAK;AAEF;AAAc;AACnB,MAAa,0BAA0B,GACnC,IAAI,cAAc,CAAkB,4BAA4B,CAAC,CADrE;AAAE;AAAK;AACwC;AAAc;AAG7D,MAAa,0BAA0B,GACnC,IAAI,cAAc,CAAuB,4BAA4B,CAAC,CAD1E;AAAE;AAAK;AAAmB;AACnB;AAAgB;AAGvB,SAAgB,kCAAkC,CAAC,OAAgB,EAAnE;AAAG,IACD;AAAa;AAAoB;AAAS,IAAnC,MAAM,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,EAAC;AAC/C,CAAA;AAED;AAAK;AACF;AAAuB;AAAgB;AAA1C,SAAgB,2CAA2C,CAAC,OAAgB,EAA5E;AAAG,IAED;AAAa;AAAoB;AAAS,IAAnC,MAAM,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,EAAC;AAC/C,CAAA;AAED;AAAK;AACF;AAAc;AAAjB,MAAa,mCAAmC,GAAG;AAClD,IAAC,OAAO,EAAE,0BAA0B;AACpC,IAAC,IAAI,EAAE,CAAC,OAAO,CAAC;AAChB,IAAC,UAAU,EAAE,2CAA2C;AACxD,CAAA,CAAD;AAAE;AAGA;AAC+C;AAGjD,MAAa,SAAS,CAAtB;AAAG;AAAS;AAA4B;AACjB;AAA6B;AAC1B;AAAkC;AACpC;AAAqC;AAAS,IAqCpE,WAAF,CACc,QAAiB,EACjB,SAAmB,EACP,SAAmB,EACiB,eAAgC,EACpD,cAAmB,EACvB,aAAwB,EAChD,iBAAmC,EAPjD;AAAG,QACW,IAAd,CAAA,QAAsB,GAAR,QAAQ,CAAS;AAC/B,QAAc,IAAd,CAAA,SAAuB,GAAT,SAAS,CAAU;AACjC,QAA0B,IAA1B,CAAA,SAAmC,GAAT,SAAS,CAAU;AAC7C,QAA8D,IAA9D,CAAA,eAA6E,GAAf,eAAe,CAAiB;AAC9F,QACsC,IAAtC,CAAA,aAAmD,GAAb,aAAa,CAAW;AAC9D,QAAc,IAAd,CAAA,iBAA+B,GAAjB,iBAAiB,CAAkB;AAAE,QA9CzC,IAAV,CAAA,uBAAiC,GAAwB,EAAE,CAAC;AAC3D,QAAkB,IAAnB,CAAA,0BAA6C,GAAG,IAAI,OAAO,EAAQ,CAAC;AACnE,QAAkB,IAAnB,CAAA,uBAA0C,GAAG,IAAI,OAAO,EAAqB,CAAC;AAC7E,QAAS,IAAV,CAAA,mBAA6B,GAAG,IAAI,GAAG,EAAwB,CAAC;AAC/D;AAEkC;AAAa;AAErB;AAGrB;AAAa,QAwBR,IAAX,CAAA,cAAyB,sBAAqB,KAAK;AAAO;AAAwB;AACvE,QADyC,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM;AAChF,YAAK,IAAI,CAAC,eAAe;AACzB,YAAK,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,EAAC,EAAmB,CAAC;AAE1E,QAQI,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;AACzC,KAAE;AAEH;AACG;AAAmD;AACtC;AAAS,IA7CvB,IAAI,WAAW,GAAjB;AAAG,QACC,OAAO,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC,uBAAuB,CAAC;AAC7F,KAAE;AAEH;AAAS;AACD;AAAoB;AAAS,IAAnC,IAAI,WAAW,GAAjB;AAAG,QACC,OAAO,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC,uBAAuB,CAAC;AAC7F,KAAE;AAEH;AACG;AACG;AACG;AAEF;AAAoB;AAAS,IAAlC,IAAI,SAAS,GAAf;AAAG,QACC,OAAO,IAAI,CAAC,WAAW,CAAC;AAC3B,KAAE;AAEH;AAAS;AAAoB;AAAS,IAApC,IAAI,eAAe,GAArB;AAAG;AAA0B,QAC7B,MAAU,MAAM,GAAG,IAAI,CAAC,aAAa,CAArC;AAAE,QACE,OAAO,MAAM,GAAG,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC,0BAA0B,CAAC;AAC5E,KAAE;AAEH;AAAS;AAA6D;AAEzD;AACsB;AAEX;AAAwD;AAEvD;AAAS,IAoBhC,IAAI,CAAsB,sBAAyD,EAC3E,MAA2B,EADrC;AAAG,QAGC,MAAM,GAAG,oBAAoB,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,IAAI,IAAI,eAAe,EAAE,CAAC,CAAC;AAEzF,QAAI,IAAI,MAAM,CAAC,EAAE,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;AACnD,YAAK,MAAM,KAAK,CAAC,CAAlB,gBAAA,EAAqC,MAAM,CAAC,EAAE,CAA9C,+CAAA,CAA+F,CAAC,CAAC;AAChG,SAAI;AAEL;AAA0B,QAA1B,MAAU,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAlD;AAAE;AAA0B,QAC5B,MAAU,eAAe,GAAG,IAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,MAAM,CAAC,CAA3E;AAAE;AAA0B,QAC5B,MAAU,SAAS,GAAG,IAAI,CAAC,oBAAoB,CAAO,sBAAsB,EACtB,eAAe,EACf,UAAU,EACV,MAAM,CAAC,CAH7D;AAAE;AACgB,QAKd,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;AACjC,YAAK,IAAI,CAAC,4CAA4C,EAAE,CAAC;AACzD,SAAI;AAEL,QAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACpC,QAAG,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS;AAAO;AAAwB;AACnE,QADqC,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAC,CAAC;AAC9E,QAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAErC,QAAI,OAAO,SAAS,CAAC;AACpB,KAAE;AAEH;AACG;AAEH;AAAoB;AACZ,IADN,QAAQ,GAAV;AAAG,QACC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACxC,KAAE;AAEH;AACG;AACG;AAEC;AAAoB;AAAS,IAAlC,aAAa,CAAC,EAAU,EAA1B;AAAG,QACC,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI;AAAO;AAGrC;AACM;AAAa,QAJY,MAAM,IAAI,MAAM,CAAC,EAAE,KAAK,EAAE,EAAC,CAAC;AAC5D,KAAE;AAEH;AAAS;AACE;AAAS,IADlB,WAAW,GAAb;AAAG;AAC0C;AACG,QAC5C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;AACpD,QAAG,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,CAAC;AAC9C,QAAG,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,CAAC;AAC3C,KAAE;AAEH;AACG;AACG;AAAiB;AACO;AAEA;AAAS,IAA7B,cAAc,CAAC,MAAuB,EAAhD;AAAG;AAA0B,QAC7B,MAAU,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAxD;AAAE,QACE,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AAC9C,KAAE;AAEH;AACG;AACG;AAAiB;AACO;AAEA;AAAS,IAA7B,iBAAiB,CAAC,YAA6B,EAAzD;AAAG;AAA0B,QAC7B,MAAUA,QAAK,GAAG,IAAI,aAAa,CAAC;AACnC,YAAK,gBAAgB,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE;AACxD,YAAK,cAAc,EAAE,YAAY,CAAC,cAAc,IAAI,IAAI,CAAC,eAAe,EAAE;AAC1E,YAAK,UAAU,EAAE,YAAY,CAAC,UAAU;AACxC,YAAK,WAAW,EAAE,YAAY,CAAC,WAAW;AAC1C,YAAK,SAAS,EAAE,YAAY,CAAC,SAAS;AACtC,YAAK,QAAQ,EAAE,YAAY,CAAC,QAAQ;AACpC,YAAK,SAAS,EAAE,YAAY,CAAC,SAAS;AACtC,YAAK,QAAQ,EAAE,YAAY,CAAC,QAAQ;AACpC,YAAK,SAAS,EAAE,YAAY,CAAC,SAAS;AACtC,YAAK,mBAAmB,EAAE,YAAY,CAAC,iBAAiB;AACxD,SAAI,CAAC,CAAN;AAAE,QAEE,IAAI,YAAY,CAAC,aAAa,EAAE;AACnC,YAAKA,QAAK,CAAC,aAAa,GAAG,YAAY,CAAC,aAAa,CAAC;AACtD,SAAI;AAEL,QAAI,OAAOA,QAAK,CAAC;AAChB,KAAE;AAEH;AACG;AACG;AAAiB;AACO;AACO;AAEA;AAAS,IAApC,sBAAsB,CAAC,OAAmB,EAAE,MAAuB,EAA7E;AAAG;AAA0B,QAC7B,MAAU,YAAY,GAAG,MAAM,IAAI,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAA9F;AAAE;AAA0B,QAC5B,MAAU,QAAQ,GAAG,IAAI,cAAc,CAAC,YAAY,IAAI,IAAI,CAAC,SAAS,EAAE,IAAI,OAAO,CAAC;AACnF,YAAK,CAAC,eAAe,EAAE,MAAM,CAAC;AAC9B,SAAI,CAAC,CAAC,CAAP;AAAE;AACiB,QAAnB,MAAU,eAAe,GAAG,IAAI,eAAe,CAAC,kBAAkB,EAC1D,MAAM,CAAC,gBAAgB,EAAE,QAAQ,EAAE,MAAM,CAAC,wBAAwB,CAAC,CAD3E;AAAE;AAA0B,QAE5B,MAAU,YAAY,GAAG,OAAO,CAAC,MAAM,CAAqB,eAAe,CAAC,CAA5E;AAAE,QAEE,OAAO,YAAY,CAAC,QAAQ,CAAC;AAChC,KAAE;AAEH;AACG;AACG;AAAiB;AAAuB;AACO;AACG;AACO;AAEtC;AAAoD;AAGtC;AAAS,IADtC,oBAAoB,CACxB,sBAAyD,EACzD,eAAmC,EACnC,UAAsB,EACtB,MAAuB,EAJ7B;AAAG;AACyD;AAC7B;AACjB,QAKd,MAAU,SAAS,GACX,IAAI,YAAY,CAAO,UAAU,EAAE,eAAe,EAAE,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE,CAAC,CADtF;AAAE;AACgD,QAG9C,IAAI,MAAM,CAAC,WAAW,EAAE;AAC3B,YAAK,UAAU,CAAC,aAAa,EAAE,CAAC,SAAS;AAAO;AACvB;AACtB,YAFuC,MAA3C;AAAG,gBACK,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;AACpC,oBAAS,SAAS,CAAC,KAAK,EAAE,CAAC;AAC3B,iBAAQ;AACR,aAAM,EAAC,CAAC;AACR,SAAI;AAEL,QAAI,IAAI,sBAAsB,YAAY,WAAW,EAAE;AACtD,YAAK,eAAe,CAAC,oBAAoB,CAClC,IAAI,cAAc,CAAI,sBAAsB,qBAAE,IAAI,uBAC3C,EAAE,SAAS,EAAE,MAAM,CAAC,IAAI,EAAE,SAAS,EAAE,GAAC,CAAC,CAAC;AACtD,SAAI;AAAE,aAAI;AACV;AAA8B,YAA/B,MAAY,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAI,MAAM,EAAE,SAAS,EAAE,eAAe,CAAC,CAAlF;AAAE;AAA8B,YAChC,MAAY,UAAU,GAAG,eAAe,CAAC,qBAAqB,CACpD,IAAI,eAAe,CAAC,sBAAsB,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,CAD3E;AAAE,YAEI,SAAS,CAAC,iBAAiB,GAAG,UAAU,CAAC,QAAQ,CAAC;AACvD,SAAI;AAEL,QAAI,SAAS;AACZ,aAAM,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC;AAC7C,aAAM,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAEvC,QAAI,OAAO,SAAS,CAAC;AACpB,KAAE;AAEH;AACG;AACG;AACG;AAAiB;AAAoB;AAExC;AAAsD;AAC5C;AAEA;AAAS,IAAf,eAAe,CACnB,MAAuB,EACvB,SAA0B,EAC1B,eAAmC,EAHzC;AAAG;AAA0B,QAK7B,MAAU,YAAY,GAAG,MAAM,IAAI,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAA9F;AAAE;AAEO;AACK;AACC;AAA2C;AAA0B,QAEpF,MAAU,eAAe,GAAG,IAAI,OAAO,CAAW;AACjD,YAAK,CAAC,kBAAkB,EAAE,eAAe,CAAC;AAC1C,YAAK,CAAC,eAAe,EAAE,MAAM,CAAC,IAAI,CAAC;AACnC,YAAK,CAAC,YAAY,EAAE,SAAS,CAAC;AAC9B,SAAI,CAAC,CAAN;AAAE,QAEE,IAAI,MAAM,CAAC,SAAS;AACvB,aAAQ,CAAC,YAAY,IAAI,CAAC,YAAY,CAAC,GAAG,CAAwB,cAAc,EAAE,IAAI,CAAC,CAAC,EAAE;AAC1F,YAAK,eAAe,CAAC,GAAG,CAAC,cAAc,EAAE;AACzC,gBAAO,KAAK,EAAE,MAAM,CAAC,SAAS;AAC9B,gBAAO,MAAM,EAAEC,EAAY,EAAE;AAC7B,aAAM,CAAC,CAAC;AACR,SAAI;AAEL,QAAI,OAAO,IAAI,cAAc,CAAC,YAAY,IAAI,IAAI,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;AAC9E,KAAE;AAEH;AACG;AACG;AAAiB;AAEC;AAAoB;AAAS,IAA3C,iBAAiB,CAAC,SAA4B,EAAxD;AAAG;AAA0B,QAC7B,MAAU,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,CAArD;AAAE,QAEE,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;AACnB,YAAK,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AAExC;AACO;AACO,YAAR,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;AACnC,gBAAO,IAAI,CAAC,mBAAmB,CAAC,OAAO;AAAO;AAC1B;AACQ;AAAgC;AAC3C,gBAHuB,CAAC,aAAa,EAAE,OAAO,KAAhE;AAAG,oBACO,IAAI,aAAa,EAAE;AAC5B,wBAAW,OAAO,CAAC,YAAY,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;AAC9D,qBAAU;AAAE,yBAAI;AAChB,wBAAW,OAAO,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;AAClD,qBAAU;AACV,iBAAQ,EAAC,CAAC;AAEX,gBAAQ,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC;AACxC,gBAAO,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;AACnC,aAAM;AACN,SAAI;AACJ,KAAE;AAEH;AACG;AAEH;AAAiB;AAAoB;AAAS,IAApC,4CAA4C,GAAtD;AAAG;AAA0B,QAC7B,MAAU,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,CAAzE;AAAE;AAAsE,QAGpE,IAAI,gBAAgB,CAAC,aAAa,EAAE;AACvC;AAA8B,YAA/B,MAAY,QAAQ,GAAG,gBAAgB,CAAC,aAAa,CAAC,QAAQ,CAA9D;AAAE,YAEI,KAAK,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;AACpD;AACD,gBADA,IAAY,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAjC;AAAE,gBAEM,IAAI,OAAO,KAAK,gBAAgB;AACvC,oBAAS,OAAO,CAAC,QAAQ,KAAK,QAAQ;AACtC,oBAAS,OAAO,CAAC,QAAQ,KAAK,OAAO;AACrC,oBAAS,CAAC,OAAO,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE;AAE9C,oBAAU,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC;AACpF,oBAAS,OAAO,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;AACrD,iBAAQ;AACR,aAAM;AACN,SAAI;AACJ,KAAE;AAEH;AAAS;AACD;AAAiB;AAA2B;AACpC;AAAS,IADf,aAAa,CAAC,OAA4B,EAApD;AAAG;AAA0B,QAC7B,IAAQ,CAAC,GAAG,OAAO,CAAC,MAAM,CAA1B;AAAE,QAEE,OAAO,CAAC,EAAE,EAAE;AACf;AACO;AACO;AACO;AAEnB,YADG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;AACxB,SAAI;AACJ,KAAE;AAEH;+BAxTA,EAAA,IAAA,EAAC,UAAU,EAAX;2FAAK;AAAE;AACM;AACV,IA5DH,EAAA,IAAA,EAAE,OAAO,EAAT;AAAG,IAYH,EAAA,IAAA,EAAE,QAAQ,EAAV;AAAG,IALH,EAAA,IAAA,EAAQ,QAAQ,EAAhB,UAAA,EAAA,CAAA,EAAA,IAAA,EA+FO,QAAQ,EA/Ff,CAAA,EAAA;AAAG,IAaH,EAAA,IAAA,EAAQ,eAAe,EAAvB,UAAA,EAAA,CAAA,EAAA,IAAA,EAmFO,QAAQ,EAnFf,EAAA,EAAA,IAAA,EAmFmB,MAAM,EAnFzB,IAAA,EAAA,CAmF0B,0BAA0B,EAnFpD,EAAA,CAAA,EAAA;AAAG,IAoFH,EAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAO,MAAM,EAAb,IAAA,EAAA,CAAc,0BAA0B,EAAxC,EAAA,CAAA,EAAA;AAAG,IACH,EAAA,IAAA,EAAqD,SAAS,EAA9D,UAAA,EAAA,CAAA,EAAA,IAAA,EAAO,QAAQ,EAAf,EAAA,EAAA,IAAA,EAAmB,QAAQ,EAA3B,CAAA,EAAA;AAAG,IAvGH,EAAA,IAAA,EAAE,gBAAgB,EAAlB;AAAE;;;;;;;;;;;;;;;;;qEAAE;AAAE;AAAK;AAGF;AACe;AAAyD;AACtD;AAmX3B,SAAS,oBAAoB,CACzB,MAAwB,EAAE,cAAgC,EAD9D;AAAG,IAED,OAAF,MAAA,CAAA,MAAA,CAAA,EAAA,EAAa,cAAc,EAAK,MAAM,CAAtC,CAAwC;AACvC,CAAA;AACA;AAAE;AAAK;AAAmC;AAAsH;AAAK;AAAK;AAA6D;AAAc;ACnXtP,IAAI,gBAAgB,GAAG,CAAC,CAAxB;AAAE;AAAK;AAGgB;AAWvB,MAAa,cAAc,CAA3B;AAAG;AAAS;AAA6B;AAC5B;AAA2B;AACnC,IAUH,WAAF,CACuB,SAA4B,EACvC,WAAoC,EACpC,OAAkB,EAH9B;AAAG,QACoB,IAAvB,CAAA,SAAgC,GAAT,SAAS,CAAmB;AACnD,QAAY,IAAZ,CAAA,WAAuB,GAAX,WAAW,CAAyB;AAChD,QAAY,IAAZ,CAAA,OAAmB,GAAP,OAAO,CAAW;AAAE;AAEvB;AAE2B;AAAa,QAdtC,IAAX,CAAA,IAAe,GAAkC,QAAQ,CAAC;AAE1D,KAQkC;AAElC;AAAS;AACK;AAAS,IADrB,QAAQ,GAAV;AAAG,QACC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;AACxB;AACO;AACO;AACO;AACO;AACO,YAA9B,IAAI,CAAC,SAAS,sBAAG,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAC,CAAC;AACpF,SAAI;AACJ,KAAE;AAEH;AAAS;AAA2B;AACpB;AAAS,IADvB,WAAW,CAAC,OAAsB,EAApC;AAAG;AAA0B,QAC7B,MAAU,aAAa,GAAG,OAAO,CAAC,iBAAiB,CAAC,IAAI,OAAO,CAAC,uBAAuB,CAAC,CAAxF;AAAE,QAEE,IAAI,aAAa,EAAE;AACtB,YAAK,IAAI,CAAC,YAAY,GAAG,aAAa,CAAC,YAAY,CAAC;AACpD,SAAI;AACJ,KAAE;AACF;oCA5CD,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,mBACT,QAAQ,EAAE,sCAAsC,mBAChD,QAAQ,EAAE,gBAAgB,mBAC1B,IAAI,EAAE;CACJ,SAAS,EAAE,+BAA+B,uBAC1C,mBAAmB,EAAE,mBAAmB,uBACxC,aAAa,EAAE,MAAM,oBACtB,eACF,EAAD,EAAA;;;;gQACE;AAAE;AAAoB;AAClB,IAlBN,EAAA,IAAA,EAAQ,YAAY,EAApB,UAAA,EAAA,CAAA,EAAA,IAAA,EA8BK,QAAQ,EA9Bb,CAAA,EAAA;AAAG,IAHH,EAAA,IAAA,EAAE,UAAU,EAAZ;AAAG,IAEH,EAAA,IAAA,EAAQ,SAAS,EAAjB;AAAE;AAAI;AACD,IAmBL,SAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,IAAA,EAAA,CAAS,YAAY,EAArB,EAAA,CAAA;AAAG,IAGH,IAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,CAAA;AAAG,IAGH,YAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,IAAA,EAAA,CAAS,kBAAkB,EAA3B,EAAA,CAAA;AAAG,IAEH,eAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,IAAA,EAAA,CAAS,gBAAgB,EAAzB,EAAA,CAAA;AAAE;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAE;AAAK;AAGmB;AAmC9B,MAAa,cAAc,CAA3B;AAAG;AAAS;AAA8B;AACjB;AAA2B;AAElD,IAAA,WAAF,CACwB,UAA6B,EACzC,WAAoC,EACpC,OAAkB,EAH9B;AAAG,QACqB,IAAxB,CAAA,UAAkC,GAAV,UAAU,CAAmB;AACrD,QAAY,IAAZ,CAAA,WAAuB,GAAX,WAAW,CAAyB;AAChD,QAAY,IAAZ,CAAA,OAAmB,GAAP,OAAO,CAAW;AAAE,QALrB,IAAX,CAAA,EAAa,GAAG,CAAhB,iBAAA,EAAoC,gBAAgB,EAAE,CAAtD,CAAwD,CAAC;AAEzD,KAGkC;AAElC;AAAS;AACK;AAAS,IADrB,QAAQ,GAAV;AAAG,QACC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;AACzB,YAAK,IAAI,CAAC,UAAU,sBAAG,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAC,CAAC;AACrF,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,UAAU,EAAE;AACxB,YAAK,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI;AAAO;AACT;AAAiB,YADd,MAA7B;AAAG;AACH,gBAAA,MAAc,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAA5D;AAAE,gBAEM,IAAI,SAAS,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE;AACpD,oBAAS,SAAS,CAAC,eAAe,GAAG,IAAI,CAAC,EAAE,CAAC;AAC7C,iBAAQ;AACR,aAAM,EAAC,CAAC;AACR,SAAI;AACJ,KAAE;AACF;oCA/BD,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,mBACT,QAAQ,EAAE,sCAAsC,mBAChD,QAAQ,EAAE,gBAAgB,mBAC1B,IAAI,EAAE;CACJ,OAAO,EAAE,kBAAkB,uBAC3B,MAAM,EAAE,IAAI,oBACb,gBACF,EAAD,EAAA;;+DACE;AAAE;AAAoB;AACP,IAlEjB,EAAA,IAAA,EAAQ,YAAY,EAApB,UAAA,EAAA,CAAA,EAAA,IAAA,EAqEK,QAAQ,EArEb,CAAA,EAAA;AAAG,IAHH,EAAA,IAAA,EAAE,UAAU,EAAZ;AAAG,IAEH,EAAA,IAAA,EAAQ,SAAS,EAAjB;AAAE;AAAI;AACD,IAkEL,EAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,CAAA;AAAE;;;;;;;;;;;;;;;oBAAE;AAAE;AAAK;AAA8C;AAgCzD,MAAa,gBAAgB,CAA7B;AAAG;sCAJH,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,mBACT,QAAQ,EAAE,CAAZ;kDAAA,CAA0E,mBACxE,IAAI,EAAE,EAAC,OAAO,EAAE,oBAAoB,EAAC,eACtC,EAAD,EAAA;;;;;;;0BACE;AAAE;AAAK;AAIkB;AACV;AAMjB,MAAa,gBAAgB,CAA7B;AAAG;sCAJH,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,mBACT,QAAQ,EAAE,CAAZ;kDAAA,CAA0E,mBACxE,IAAI,EAAE,EAAC,OAAO,EAAE,oBAAoB,EAAC,eACtC,EAAD,EAAA;;;;;;;0BACE;AAAE;AAAK;AAIiC;AACA;AACG;AAAgB;AAE7D,SAAS,gBAAgB,CAAC,OAAgC,EAAE,WAAgC,EAA5F;AAAG;AAAsB,IACzB,IAAM,MAAM,GAAuB,OAAO,CAAC,aAAa,CAAC,aAAa,CAAtE;AAAE,IAEA,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,sBAAsB,CAAC,EAAE;AACtE,QAAG,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC;AACjC,KAAE;AAEH,IAAE,OAAO,MAAM,GAAG,WAAW,CAAC,IAAI;AAAO;AAA0B;AAE7D;AAAS,IAFoB,MAAM,IAAI,MAAM,CAAC,EAAE,KAAK,mBAAA,MAAM,GAAE,EAAE,EAAC,GAAG,IAAI,CAAC;AAC7E,CAAA;AACA;AAAE;AAAK;AAAmC;AAAsH;AC7FjK,MAAa,eAAe,CAA5B;AAAG;qCA5BH,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU,mBACR,OAAO,EAAE;YACP,YAAY,uBACZ,aAAa;QACb,YAAY,uBACZ,eAAe;gBAChB;gBACD,OAAO,EAAE;GACP;EAAkB,uBAClB;aAAc;SACd,cAAc;oBACd;OAAgB,uBAChB;cAAgB,uBAChB,eAAe,oBAChB,mBACD,YAAY,EAAE,uBACZ,kBAAkB,uBAClB,cAAc,uBACd,cAAc,uBACd,gBAAgB,uBAChB;cAAgB;WACjB;QACD,SAAS,EAAE,uBACT,SAAS,uBACT,mCAAmC,oBACpC,mBACD,eAAe,EAAE,CAAC;MAAkB,CAAC,gBACtC,EAAD,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BACE;AAAE;AAAE;AAAK;AACG;AAAsH;AAAK;AAAE;AAAK;AAAmC;AAAsH;AAAK;AAAE;AAA8Z","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, ComponentFactoryResolver} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Alternate `ComponentFactoryResolver` to use when resolving the associated component. */\n  componentFactoryResolver?: ComponentFactoryResolver;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/** Possible states of the lifecycle of a dialog. */\nexport const enum MatDialogState {OPEN, CLOSING, CLOSED}\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  /** Current state of the dialog. */\n  private _state = MatDialogState.OPEN;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }))\n      .subscribe(event => {\n        event.preventDefault();\n        this.close();\n      });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._state = MatDialogState.CLOSED;\n      this._overlayRef.detachBackdrop();\n\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(() => {\n        this._overlayRef.dispose();\n      }, event.totalTime + 100);\n    });\n\n    this._containerInstance._startExitAnimation();\n    this._state = MatDialogState.CLOSING;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Gets the current state of the dialog's lifecycle. */\n  getState(): MatDialogState {\n    return this._state;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal = new ComponentPortal(MatDialogContainer,\n        config.viewContainerRef, injector, config.componentFactoryResolver);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n"]}