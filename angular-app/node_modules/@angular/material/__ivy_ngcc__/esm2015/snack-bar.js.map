{"version":3,"file":"snack-bar.js","sources":["../../../src/material/snack-bar/snack-bar-ref.ts","../../../src/material/snack-bar/snack-bar-config.ts","../../../src/material/snack-bar/simple-snack-bar.ts","../../../src/material/snack-bar/snack-bar-animations.ts","../../../src/material/snack-bar/snack-bar-container.ts","../../../src/material/snack-bar/snack-bar-module.ts","../../../src/material/snack-bar/snack-bar.ts"],"names":["state"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(\n      takeUntil(overlayRef.detachments())\n    ).subscribe(state => {\n      const classList = overlayRef.overlayElement.classList;\n      const className = 'mat-snack-bar-handset';\n      state.matches ? classList.add(className) : classList.remove(className);\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n"]}