{"version":3,"file":"slider.js","sources":["../../../src/material/slider/slider.ts","../../../src/material/slider/slider-module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA,MAAM,wBAAwB,GAAG,EAAE,CAAnC;AAAE;AAAK;AAEQ;AAAc;AAC7B,MAAM,kBAAkB,GAAG,CAAC,CAA5B;AAAE;AAAK;AAEsC;AAAc;AAC3D,MAAM,6BAA6B,GAAG,CAAC,CAAvC;AAAE;AAAK;AAEwB;AAAc;AAC7C,MAAM,0BAA0B,GAAG,EAAE,CAArC;AAAE;AAAK;AAG0C;AACxB;AAAmB;AAAc;AAG1D,MAAa,yBAAyB,GAAQ;AAC7C,IAAC,OAAO,EAAE,iBAAiB;AAC3B,IAAC,WAAW,EAAE,UAAU;AAAO;AACxB;AAER,IAH0B,MAAM,SAAS,EAAC;AACzC,IAAC,KAAK,EAAE,IAAI;AACZ,CAAA,CAAD;AAAE;AAEC;AACH;AAAA,MAAa,eAAe,CAA5B;AAAG,CAMF;AAED;AAEA;AAAK;AACF;AAAH,MAAM,aAAa,CAAnB;AAAG;AAAS;AACS;AAAS,IAA5B,WAAF,CAAqB,WAAuB,EAA5C;AAAG,QAAkB,IAArB,CAAA,WAAgC,GAAX,WAAW,CAAY;AAAE,KAAE;AAC/C,CAAA;AACA;AAAD,MAAM,mBAAmB,GAKjB,aAAa,CAAC,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,EAAE,QAAQ,CAAC,CAAC,CALzE;AAAE;AAAK;AAIM;AACgC;AAoD7C,MAAa,SAAU,SAAQ,mBAAmB,CAAlD;AAAG;AAAS;AAA8B;AAClB;AAAsC;AAAwB;AAChE;AAEjB;AAAS,IAyTZ,WAAF,CAAc,UAAsB,EACd,aAA2B,EAC3B,kBAAqC,EACzB,IAAoB,EACjB,QAAgB,EAEW,cAAuB,EANvF;AAAG,QAOC,KAAK,CAAC,UAAU,CAAC,CAAC;AAEtB,QARsB,IAAtB,CAAA,aAAmC,GAAb,aAAa,CAAc;AACjD,QAAsB,IAAtB,CAAA,kBAAwC,GAAlB,kBAAkB,CAAmB;AAC3D,QAAkC,IAAlC,CAAA,IAAsC,GAAJ,IAAI,CAAgB;AACtD,QAEgE,IAAhE,CAAA,cAA8E,GAAd,cAAc,CAAS;AAAE,QA3T/E,IAAV,CAAA,OAAiB,GAAG,KAAK,CAAC;AAE1B,QAUU,IAAV,CAAA,IAAc,GAAW,GAAG,CAAC;AAE7B,QAeU,IAAV,CAAA,IAAc,GAAW,CAAC,CAAC;AAE3B,QAaU,IAAV,CAAA,KAAe,GAAW,CAAC,CAAC;AAE5B,QAIU,IAAV,CAAA,WAAqB,GAAY,KAAK,CAAC;AAEvC,QAeU,IAAV,CAAA,aAAuB,GAAoB,CAAC,CAAC;AAE7C,QA0BU,IAAV,CAAA,MAAgB,GAAkB,IAAI,CAAC;AAEvC,QAaU,IAAV,CAAA,SAAmB,GAAG,KAAK,CAAC;AAE5B;AAAa;AACG;AAAa,QAAR,IAArB,CAAA,MAA2B,GAAkC,IAAI,YAAY,EAAmB,CAAC;AAEjG;AAAa;AACG;AAAa,QAAR,IAArB,CAAA,KAA0B,GAAkC,IAAI,YAAY,EAAmB,CAAC;AAEhG;AACO;AACO;AAEZ;AACqB;AAAa,QAAf,IAArB,CAAA,WAAgC,GAAgC,IAAI,YAAY,EAAiB,CAAC;AAElG;AAAa;AAER;AAAa,QA2BhB,IAAF,CAAA,SAAW;AAAS;AAEZ;AAAa,QAFI,MAAzB,GAAiC,CAAjC,CAAkC;AAElC,QAEU,IAAV,CAAA,QAAkB,GAAW,CAAC,CAAC;AAE/B;AACO;AACO;AAEC;AAAa,QAA1B,IAAF,CAAA,UAAY,GAAY,KAAK,CAAC;AAE9B;AACO;AACO;AAEC;AAAa,QAA1B,IAAF,CAAA,SAAW,GAAY,KAAK,CAAC;AAE7B;AACO;AACiC;AAAa,QAuG3C,IAAV,CAAA,oBAA8B,GAAW,CAAC,CAAC;AAE3C;AAAa;AACG;AAAa,QAAnB,IAAV,CAAA,iBAA2B,GAAsB,IAAI,CAAC;AAEtD,QAAU,IAAV,CAAA,6BAAuC;AAAS;AAAwB;AAE9D,QAFsD,MAAhE,GAAwE,CAAxE,CAAyE;AAEzE;AAAa;AACK;AAAa,QAGrB,IAAV,CAAA,sBAAgC,GAAG,YAAY,CAAC,KAAK,CAAC;AAEtD,QA4BI,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAC3C,KAAE;AAEH;AAAS;AAEE;AAAoB;AAAS,IAxUtC,IACI,MAAM,GADZ,EAC0B,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE;AAC/C;AAAS;AACN;AAAoB;AAAS,IAD/B,IAAI,MAAM,CAAC,KAAc,EAA3B;AAAG,QACC,IAAI,CAAC,OAAO,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;AAC/C,KAAE;AACF;AAAS;AAEwB;AACjC;AAAS,IAAR,IACI,GAAG,GADT,EACsB,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE;AACxC;AAAS;AACF;AAAoB;AAAS,IADnC,IAAI,GAAG,CAAC,CAAS,EAAnB;AAAG,QACC,IAAI,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AAClD,QAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAE3D;AACK,QAAD,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;AAC1C,KAAE;AACF;AAAS;AAEqB;AAAoB;AAC5C,IAAL,IACI,GAAG,GADT,EACsB,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE;AACxC;AAAS;AACF;AAAoB;AAAS,IADnC,IAAI,GAAG,CAAC,CAAS,EAAnB;AAAG,QACC,IAAI,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AAEnD;AACK,QAAD,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;AAC7B,YAAK,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;AAC5B,SAAI;AACJ,QAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAE3D;AACK,QAAD,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;AAC1C,KAAE;AACF;AAAS;AAEoB;AAC9B;AAAS,IAAP,IACI,IAAI,GADV,EACuB,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE;AAC1C;AAAS;AACH;AAAoB;AAAS,IADlC,IAAI,IAAI,CAAC,CAAS,EAApB;AAAG,QACC,IAAI,CAAC,KAAK,GAAG,oBAAoB,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;AAErD,QAAI,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;AAC7B,YAAK,IAAI,CAAC,eAAe,GAAG,mBAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAE,MAAM,CAAC;AAC3E,SAAI;AAEL;AACK,QAAD,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;AAC1C,KAAE;AACF;AAAS;AAEkB;AAAoB;AACxC,IAAN,IACI,UAAU,GADhB,EAC8B,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE;AACvD;AAAS;AAAyB;AAAoB;AAAS,IAA9D,IAAI,UAAU,CAAC,KAAc,EAA/B,EAAmC,IAAI,CAAC,WAAW,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;AACpF;AAAS;AAGgD;AACM;AAAoB;AAAS,IAE3F,IACI,YAAY,GADlB,EACuB,OAAO,IAAI,CAAC,aAAa,CAAC,EAAE;AAClD;AAAS;AAAyB;AACzB;AAAS,IADjB,IAAI,YAAY,CAAC,KAAsB,EAAzC;AAAG,QACC,IAAI,KAAK,KAAK,MAAM,EAAE;AACzB,YAAK,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;AACjC,SAAI;AAAE,aAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AACtE,YAAK,IAAI,CAAC,aAAa,GAAG,oBAAoB,CAAC,KAAK,qBAAE,IAAI,CAAC,aAAa,GAAW,CAAC;AACpF,SAAI;AAAE,aAAI;AACV,YAAK,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;AAC5B,SAAI;AACJ,KAAE;AACF;AAAS;AAA6B;AAE3B;AAAS,IACnB,IACI,KAAK,GADX;AAAG;AAEyD,QACxD,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;AAC7B,YAAK,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;AAC5B,SAAI;AACJ,QAAG,OAAO,IAAI,CAAC,MAAM,CAAC;AACtB,KAAE;AACF;AAAS;AAAqB;AACZ;AAAS,IAD1B,IAAI,KAAK,CAAC,CAAgB,EAA5B;AAAG,QACC,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,EAAE;AAC1B;AAA8B,YAA/B,IAAU,KAAK,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAzC;AAAE;AAEuD;AACQ,YAC3D,IAAI,IAAI,CAAC,eAAe,EAAE;AAC/B,gBAAO,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;AAC/D,aAAM;AAEP,YAAM,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACzB,YAAK,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAE7D;AACO,YAAD,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;AAC5C,SAAI;AACJ,KAAE;AACF;AAAS;AAGP;AAAoB;AAAS,IAO9B,IACI,QAAQ,GADd,EAC4B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;AACnD;AAAS;AACR;AAAoB;AAAS,IAD7B,IAAI,QAAQ,CAAC,KAAc,EAA7B;AAAG,QACC,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;AACjD,KAAE;AACF;AAAS;AAEqB;AAAoB;AACjD,IAaA,IAAI,YAAY,GAAlB;AAAG,QACC,IAAI,IAAI,CAAC,WAAW,EAAE;AACzB;AACO;AACO,YAAT,OAAO,IAAI,CAAC,WAAW,oBAAC,IAAI,CAAC,KAAK,GAAE,CAAC;AAC1C,SAAI;AAEL;AACK;AACK;AACK,QAAX,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;AACnE,YAAK,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AACrD,SAAI;AAEL,QAAI,OAAO,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;AAC1B,KAAE;AAEH;AAAS;AACD;AACN;AAAoB;AAAS,IAD7B,KAAK,CAAC,OAAsB,EAA9B;AAAG,QACC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;AACnC,KAAE;AAEH;AAAS;AACD;AACS;AAAS,IADxB,IAAI,GAAN;AAAG,QACC,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC3B,KAAE;AAEH;AAAS;AAAoE;AAC7D;AAAS,IAGvB,IAAI,OAAO,GAAb,EAA0B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE;AAC7D;AAAS;AAGa;AAC6D;AAEvE;AAAS,IAYpB,IAAI,WAAW,GAAjB;AAAG;AACmF;AAChC,QAClD,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACrD,KAAE;AAEH;AACQ;AACD;AACF;AAAS,IADZ,IAAI,WAAW,GAAjB;AAAG,QACC,OAAO,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC;AAC7B,KAAE;AAEH;AACG;AACG;AAEH;AACA;AAAS,IADV,IAAI,SAAS,GAAf;AAAG,QACC,IAAI,IAAI,CAAC,QAAQ,EAAE;AACtB,YAAK,OAAO,kBAAkB,CAAC;AAC/B,SAAI;AACJ,QAAG,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;AAC7C,YAAK,OAAO,IAAI,CAAC,SAAS,GAAG,0BAA0B,GAAG,6BAA6B,CAAC;AACxF,SAAI;AACJ,QAAG,OAAO,CAAC,CAAC;AACZ,KAAE;AAEH;AAAS;AACD;AAAoB;AAAS,IAAnC,IAAI,sBAAsB,GAA5B;AAAG;AAA0B,QAC7B,MAAU,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,CAA1C;AAAE;AAA0B,QAC5B,MAAU,KAAK,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAlC,GAAA,EAAwC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAxD,GAAA,CAA6D,GAAG,CAAhE,EAAmE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAnF,MAAA,CAA2F,CAA3F;AAAE;AAA0B,QAC5B,MAAU,IAAI,GAAG,IAAI,CAAC,wBAAwB,EAAE,GAAG,GAAG,GAAG,EAAE,CAA3D;AAAE,QAEE,OAAO;AACV;AACO,YAAF,SAAS,EAAE,CAAjB,SAAA,EAA6B,IAAI,CAAjC,CAAA,EAAqC,IAAI,CAAzC,EAA4C,IAAI,CAAC,SAAS,CAA1D,YAAA,EAAyE,KAAK,CAA9E,CAAA,CAAiF;AAChF,SAAI,CAAC;AACL,KAAE;AAEH;AAAS;AACD;AAAoB;AAAS,IAAnC,IAAI,gBAAgB,GAAtB;AAAG;AAA0B,QAC7B,MAAU,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,CAA1C;AAAE;AAA0B,QAC5B,MAAU,KAAK,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAlC,GAAA,EAAwC,IAAI,CAAC,OAAO,CAApD,GAAA,CAAyD,GAAG,CAA5D,EAA+D,IAAI,CAAC,OAAO,CAA3E,MAAA,CAAmF,CAAnF;AAAE;AAA0B,QAC5B,MAAU,IAAI,GAAG,IAAI,CAAC,wBAAwB,EAAE,GAAG,EAAE,GAAG,GAAG,CAA3D;AAAE,QAEE,OAAO;AACV;AACO,YAAF,SAAS,EAAE,CAAjB,SAAA,EAA6B,IAAI,CAAjC,CAAA,EAAqC,IAAI,CAAzC,EAA4C,IAAI,CAAC,SAAS,CAA1D,YAAA,EAAyE,KAAK,CAA9E,CAAA,CAAiF;AAChF,SAAI,CAAC;AACL,KAAE;AAEH;AAAS;AACD;AAAoB;AAAS,IAAnC,IAAI,qBAAqB,GAA3B;AAAG;AAA0B,QAC7B,IAAQ,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAxC;AAAE;AACyD;AACL;AAA0B,QAChF,IAAQ,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,EAAE,IAAI,KAAK,GAAG,EAAE,GAAG,GAAG,CAAzE;AAAE;AAA0B,QAC5B,IAAQ,MAAM,GAAG,IAAI,CAAC,oBAAoB,GAAG,CAAC,GAAG,GAAG,CAApD;AAAE,QACE,OAAO;AACV,YAAK,WAAW,EAAE,CAAnB,SAAA,EAA+B,IAAI,CAAnC,CAAA,EAAuC,IAAI,CAA3C,EAA8C,MAAM,CAApD,EAAA,CAAwD;AACvD,SAAI,CAAC;AACL,KAAE;AAEH;AAAS;AACD;AAAoB;AAAS,IAAnC,IAAI,YAAY,GAAlB;AAAG;AAA0B,QAC7B,IAAQ,QAAQ,GAAG,IAAI,CAAC,oBAAoB,GAAG,GAAG,CAAlD;AAAE;AAA0B,QAC5B,IAAQ,cAAc,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAzC,IAAA,EAAgD,QAAQ,CAAxD,CAAA,CAA2D,GAAG,CAA9D,EAAiE,QAAQ,CAAzE,KAAA,CAAgF,CAAhF;AAAE;AAA0B,QAC5B,IAAQ,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAxC;AAAE;AACwD;AACW;AACT;AAC3D,QAAD,IAAQ,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,EAAE,IAAI,KAAK,GAAG,GAAG,GAAG,EAAE,CAAzE;AAAE;AAA0B,QAC5B,IAAQ,MAAM,GAAG,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,EAAE,IAAI,KAAK,GAAG,iBAAiB,GAAG,EAAE,CAAzF;AAAE;AAA0B,QAC5B,IAAQ,MAAM,GAA8B;AAC3C,YAAK,gBAAgB,EAAE,cAAc;AACrC;AACO,YAAF,WAAW,EAAE,CAAnB,uBAAA,EAA6C,IAAI,CAAjD,CAAA,EAAqD,IAAI,CAAzD,EAA4D,QAAQ,GAAG,CAAC,CAAxE,EAAA,EAA6E,MAAM,CAAnF,CAAqF;AACpF,SAAI,CAAL;AAAE,QAEE,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,SAAS,EAAE;AAC3C;AAA8B,YAA/B,IAAU,IAAI,GAAG,IAAI,CAAC,QAAQ;AAC7B,iBAAU,IAAI,CAAC,WAAW,GAAG,QAAQ,GAAG,KAAK;AAC7C,iBAAU,IAAI,CAAC,WAAW,GAAG,OAAO,GAAG,MAAM,CAAC,CAA/C;AAAE,YACI,MAAM,CAAC,CAAb,OAAA,EAAuB,IAAI,CAA3B,CAA6B,CAAC,GAAG,CAAjC,EAAoC,IAAI,CAAC,SAAS,CAAlD,EAAA,CAAsD,CAAC;AACtD,SAAI;AAEL,QAAI,OAAO,MAAM,CAAC;AACjB,KAAE;AAEH;AAAS;AAAoB;AAAS,IAApC,IAAI,qBAAqB,GAA3B;AAAG;AAA0B,QAC7B,IAAQ,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAxC;AAAE;AACyD;AACL;AAA0B,QAChF,IAAQ,YAAY,GACZ,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CADhG;AAAE;AACG,QACL,IAAQ,MAAM,GAAG,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,IAAI,GAAG,CAAvE;AAAE,QACE,OAAO;AACV,YAAK,WAAW,EAAE,CAAnB,SAAA,EAA+B,IAAI,CAAnC,EAAA,EAAwC,MAAM,CAA9C,EAAA,CAAkD;AACjD,SAAI,CAAC;AACL,KAAE;AAEH;AAAS;AACqB;AAGD;AAAoB;AAE/C,IAkBA,wBAAwB,GAA1B;AAAG,QACC,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;AACnG,KAAE;AAEH;AAAS;AACD;AAAiB;AACR;AAAS,IADhB,aAAa,GAAvB;AAAG,QACC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,CAAC;AAClE,KAAE;AAEH;AAAS;AAAoB;AAC7B,IAWE,QAAQ,GAAV;AAAG,QACC,IAAI,CAAC,aAAa;AACrB,aAAQ,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC;AACvC,aAAQ,SAAS;AAAO;AAChB;AAAwB;AAAa,QAD3B,CAAC,MAAmB,KAAvC;AAAG,YACO,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,MAAM,IAAI,MAAM,KAAK,UAAU,CAAC;AAC5D,YAAS,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,CAAC;AACjD,SAAQ,EAAC,CAAC;AACV,QAAG,IAAI,IAAI,CAAC,IAAI,EAAE;AAClB,YAAK,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS;AAAO;AAC3C;AAAiB,YADoB,MAA/D;AAAG,gBACK,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;AAC9C,aAAM,EAAC,CAAC;AACR,SAAI;AACJ,KAAE;AAEH;AAAS;AACE;AAAS,IADlB,WAAW,GAAb;AAAG,QACC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACvD,QAAG,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,CAAC;AAC7C,KAAE;AAEH;AAAS;AACA;AAAS,IADhB,aAAa,GAAf;AAAG,QACC,IAAI,IAAI,CAAC,QAAQ,EAAE;AACtB,YAAK,OAAO;AACZ,SAAI;AAEL;AACK;AACK,QAAN,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;AACxD,QAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;AACrC,KAAE;AAEH;AAAS;AAAyB;AAChB;AAAS,IADzB,YAAY,CAAC,KAAiB,EAAhC;AAAG;AAC2B;AACW,QACrC,IAAI,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;AAC5C,YAAK,OAAO;AACZ,SAAI;AAEL;AAA0B,QAA1B,MAAU,QAAQ,GAAG,IAAI,CAAC,KAAK,CAA/B;AAAE,QACE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;AAC3B,QAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAC5B,QAAG,IAAI,CAAC,wBAAwB,CAAC,EAAC,CAAC,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,EAAE,KAAK,CAAC,OAAO,EAAC,CAAC,CAAC;AAExE;AACK,QAAD,IAAI,QAAQ,IAAI,IAAI,CAAC,KAAK,EAAE;AAC/B,YAAK,IAAI,CAAC,eAAe,EAAE,CAAC;AAC5B,YAAK,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC7B,SAAI;AACJ,KAAE;AAEH;AAAS;AACR;AAAoB;AAChB,IAFH,QAAQ,CAAC,KAAkB,EAA7B;AAAG,QACC,IAAI,IAAI,CAAC,QAAQ,EAAE;AACtB,YAAK,OAAO;AACZ,SAAI;AAEL;AACK;AACK,QAAN,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;AACzB,YAAK,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAC9B,SAAI;AAEL;AACK,QAAD,KAAK,CAAC,cAAc,EAAE,CAAC;AAE3B;AAA0B,QAA1B,IAAQ,QAAQ,GAAG,IAAI,CAAC,KAAK,CAA7B;AAAE,QACE,IAAI,CAAC,wBAAwB,CAAC,EAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC;AAE1E;AACK,QAAD,IAAI,QAAQ,IAAI,IAAI,CAAC,KAAK,EAAE;AAC/B,YAAK,IAAI,CAAC,eAAe,EAAE,CAAC;AAC5B,SAAI;AACJ,KAAE;AAEH;AAAS;AAAyB;AACzB;AAAS,IADhB,aAAa,CAAC,KAAyB,EAAzC;AAAG,QACC,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE;AACzC,YAAK,OAAO;AACZ,SAAI;AAEL;AACK,QAAD,IAAI,CAAC,aAAa,EAAE,CAAC;AAEzB,QAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AAC1B,QAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAC5B,QAAG,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC;AAEzC,QAAI,IAAI,KAAK,EAAE;AACd,YAAK,IAAI,CAAC,wBAAwB,CAAC,EAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC;AAC3E,YAAK,KAAK,CAAC,cAAc,EAAE,CAAC;AAC5B,SAAI;AACJ,KAAE;AAEH;AAAS;AACE;AAAS,IADlB,WAAW,GAAb;AAAG,QACC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;AAE5B,QAAI,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AAChE,YAAK,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC7B,SAAI;AACJ,QAAG,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;AAClC,KAAE;AAEH;AAAS;AACK;AAAS,IADrB,QAAQ,GAAV;AAAG;AACuF;AACd,QACxE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;AACxD,QAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;AACrC,KAAE;AAEH;AAAS;AACM;AACb,IAFA,OAAO,GAAT;AAAG,QACC,IAAI,CAAC,SAAS,EAAE,CAAC;AACpB,KAAE;AAEH;AAAS;AAAyB;AACjB;AAAS,IADxB,UAAU,CAAC,KAAoB,EAAjC;AAAG,QACC,IAAI,IAAI,CAAC,QAAQ,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE;AAC/C,YAAK,OAAO;AACZ,SAAI;AAEL;AAA0B,QAA1B,MAAU,QAAQ,GAAG,IAAI,CAAC,KAAK,CAA/B;AAAE,QAEE,QAAQ,KAAK,CAAC,OAAO;AACxB,YAAK,KAAK,OAAO;AACjB,gBAAO,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;AAC3B,gBAAO,MAAM;AACb,YAAK,KAAK,SAAS;AACnB,gBAAO,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;AAC5B,gBAAO,MAAM;AACb,YAAK,KAAK,GAAG;AACb,gBAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC;AAC7B,gBAAO,MAAM;AACb,YAAK,KAAK,IAAI;AACd,gBAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC;AAC7B,gBAAO,MAAM;AACb,YAAK,KAAK,UAAU;AACpB;AACS;AACS;AACS;AACS;AACS;AACS;AACS,gBAAxD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC/D,gBAAO,MAAM;AACb,YAAK,KAAK,QAAQ;AAClB,gBAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAC1B,gBAAO,MAAM;AACb,YAAK,KAAK,WAAW;AACrB;AACS,gBAAF,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/D,gBAAO,MAAM;AACb,YAAK,KAAK,UAAU;AACpB,gBAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,gBAAO,MAAM;AACb,YAAK;AACL;AACS;AAEP,gBADK,OAAO;AACd,SAAI;AAEL,QAAI,IAAI,QAAQ,IAAI,IAAI,CAAC,KAAK,EAAE;AAC/B,YAAK,IAAI,CAAC,eAAe,EAAE,CAAC;AAC5B,YAAK,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC7B,SAAI;AAEL,QAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AAC1B,QAAG,KAAK,CAAC,cAAc,EAAE,CAAC;AAC1B,KAAE;AAEH;AAAS;AACK;AAAS,IADrB,QAAQ,GAAV;AAAG,QACC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;AAC3B,KAAE;AAEH;AAAS;AACD;AAAiB;AACb;AAAoB;AAAS,IAD/B,UAAU,CAAC,QAAgB,EAArC;AAAG,QACC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,GAAG,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1F,KAAE;AAEH;AAAS;AACD;AAAiB;AAAuB;AAC9C;AAAS,IADD,wBAAwB,CAAC,GAA2B,EAA9D;AAAG,QACC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;AAChC,YAAK,OAAO;AACZ,SAAI;AAEL;AAA0B,QAA1B,IAAQ,MAAM,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAzF;AAAE;AAA0B,QAC5B,IAAQ,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAA3F;AAAE;AAA0B,QAC5B,IAAQ,YAAY,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAApD;AAAE;AAE2C;AAA0B,QACvE,IAAQ,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,YAAY,GAAG,MAAM,IAAI,IAAI,CAAC,CAA7D;AAAE,QAEE,IAAI,IAAI,CAAC,wBAAwB,EAAE,EAAE;AACxC,YAAK,OAAO,GAAG,CAAC,GAAG,OAAO,CAAC;AAC3B,SAAI;AAEL;AACK;AACK;AACK;AACK,QAAhB,IAAI,OAAO,KAAK,CAAC,EAAE;AACtB,YAAK,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC;AAC3B,SAAI;AAAE,aAAI,IAAI,OAAO,KAAK,CAAC,EAAE;AAC7B,YAAK,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC;AAC3B,SAAI;AAAE,aAAI;AACV;AAA8B,YAA/B,MAAY,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAtD;AAAE;AAEsB;AACA;AAA8B,YACtD,MAAY,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAjG;AAAE;AAA4D,YAGxD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;AAChE,SAAI;AACJ,KAAE;AAEH;AAAS;AACD;AAAiB;AACX;AAAS,IADb,gBAAgB,GAA1B;AAAG,QACC,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAClD,QAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACrC,QAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC;AAC/C,KAAE;AAEH;AAAS;AACD;AAAiB;AACV;AAAS,IADd,eAAe,GAAzB;AAAG,QACC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC;AAC9C,KAAE;AAEH;AAAS;AACD;AAAiB;AACrB;AAAS,IADH,0BAA0B,GAApC;AAAG,QACC,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;AACtD,YAAK,OAAO;AACZ,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,YAAY,IAAI,MAAM,EAAE;AACpC;AAA8B,YAA/B,IAAU,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAlG;AAAE;AAA8B,YAChC,IAAU,aAAa,GAAG,SAAS,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAvE;AAAE;AAA8B,YAChC,IAAU,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,wBAAwB,GAAG,aAAa,CAAC,CAA5E;AAAE;AAA8B,YAChC,IAAU,aAAa,GAAG,YAAY,GAAG,IAAI,CAAC,IAAI,CAAlD;AAAE,YACI,IAAI,CAAC,oBAAoB,GAAG,aAAa,GAAG,SAAS,CAAC;AAC3D,SAAI;AAAE,aAAI;AACV,YAAK,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AACvF,SAAI;AACJ,KAAE;AAEH;AAAS;AACD;AAAiB;AAA0B;AAChD;AAAS,IADF,kBAAkB,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,EAA/C;AAAG;AAA0B,QAC7B,IAAQ,KAAK,GAAG,IAAI,eAAe,EAAE,CAArC;AAAE,QAEE,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;AACvB,QAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;AAExB,QAAI,OAAO,KAAK,CAAC;AAChB,KAAE;AAEH;AAAS;AACD;AAAiB;AAAyB;AACnC;AAAS,IADd,oBAAoB,CAAC,KAAoB,EAAnD;AAAG,QACC,OAAO,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AAC5D,KAAE;AAEH;AAAS;AACD;AAAiB;AAClB;AAAoB;AAAS,IAD1B,eAAe,CAAC,UAAkB,EAA5C;AAAG,QACC,OAAO,IAAI,CAAC,GAAG,GAAG,UAAU,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AACxD,KAAE;AAEH;AAAS;AACD;AAAiB;AAAyB;AAC5B;AAAwB;AAIvC;AAAS,IALN,MAAM,CAAC,KAAa,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAhD;AAAG,QACC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;AAC9C,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAiB;AACf;AAAS,IADP,oBAAoB,GAA9B;AAAG,QACC,OAAO,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,qBAAqB,EAAE,GAAG,IAAI,CAAC;AACjG,KAAE;AAEH;AACG;AACG;AAEH;AAAiB;AAA4B;AAClC;AAAS,IADb,iBAAiB,CAAC,OAAsB,EAAlD;AAAG,QACC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AACjD,KAAE;AAEH;AAAS;AACD;AAAiB;AACX;AAAS,IADb,gBAAgB,GAA1B;AAAG,QACC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;AACzC,KAAE;AAEH;AACG;AACG;AAEC;AACP;AAAS,IADP,UAAU,CAAC,KAAU,EAAvB;AAAG,QACC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACtB,KAAE;AAEH;AACG;AACG;AACG;AAEC;AAAoB;AAAS,IAArC,gBAAgB,CAAC,EAAwB,EAA3C;AAAG,QACC,IAAI,CAAC,6BAA6B,GAAG,EAAE,CAAC;AAC3C,KAAE;AAEH;AACG;AACG;AACG;AAEC;AAAoB;AACtB,IADN,iBAAiB,CAAC,EAAO,EAA3B;AAAG,QACC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACvB,KAAE;AAEH;AACG;AACG;AACG;AAEC;AAAoB;AAAS,IAArC,gBAAgB,CAAC,UAAmB,EAAtC;AAAG,QACC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;AAC9B,KAAE;AACF;+BAxrBD,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,CAAX,QAAA,EAAA,YAAA,mBACE,QAAQ,EAAE,WAAZ,mBACE,SAAF,EAAA,CAAA,yBAAA,CAAA,mBACE,IAAF,EAAA,uBACA,SAAA,EAAA,YAAA,uBACM,QAAN,EAAA,WAAA,uBACI,aAAJ,EAAA,sBAAA;QACI,WAAJ,EAAA,oBAAA,uBACI,SAAJ,EAAA,YAAA,uBACI,cAAJ,EAAA,iBAAqC;eACjC,SAAS,EAAE;QAAf;WACI;OAAJ,EAAkB,eAAlB,uBACI,cAAJ,EAAA,uBAAA;;oLAKI,MAAJ,EAAA,QAAA,uBACI,YAAJ,EAAA,UAAA,uBACI,sBAAJ,EAAA,UAAA,uBACI,sBAAJ,EAA4B,KAA5B,uBACI,sBAAsB,EAAE,KAA5B,uBACI,sBAAsB,EAAE,OAA5B,uBACI,yBAAJ,EAAA,sCAAA,uBACI,6BAAJ,EAAmC,UAAnC,uBACI,8BAAJ,EAAA,cAAA,uBACI,+BAA+B,EAAnC,WAAA,uBACI,kCAAJ,EAAA,aAAA;;;kIAKI,wCAAwC,EAAE,YAA9C;MACI,6BAAJ,EAAA,UAAA,uBACI,8BAAJ,EAAA,aAAA,uBACI,mCAAJ,EAAA,qDAAA,uBACI,iCAAJ,EAAA,qCAAA,oBACA,mBACA,QAAA,EAAA;sdAAA,mBACA,MAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+4LAAA,CAAA,mBACE,MAAF,EAAA,CAAA,UAAA,EAAA,OAAA,EAAA,UAAA,CAAA,mBACE,aAAF,EAAA,iBAAA,CAAA,IAAA,mBACE,eAAF,EAAA,uBAA0C,CAAC,MAA3C,gBACA,EAAA,EAAA,IACA,+kDAAA;AAAE;AAAoB;AAElB;AAA2B;AACtB,IA/HT,EAAA,IAAA,EAAE,iBAAF,EAAA;AAAG,IAnBH,EAAA,IAAA,EAAQ,cAAR,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,CAAA,EAAA;AAAG,IAiBH,EAAA,IAAA,EAAE,MAAF,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,UAAA,EAAA,EAAA,CAAA,EAAA;AAAG,IAhBH,EAAA,IAAA,EAAQ,MAAR,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,QAgde,EAhdf,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,qBAAA,EAAA,EAAA,CAAA,EAAA;AAAE,CAidF,CAAA;AAEA,SAAA,CAAA,cAAA,GAAA;AAAG;AAAgC;AAA6B,IAhUhE,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAQ;AACR,IAOA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;AAAG,IAYH,UAAA,EAAA,CAAA,EAAA,IAAQ,EAAR,KAAA,EAAA,CAAA;AAAG,IAiBH,YAAA,EAAA,CAAG,EAAH,IAAA,EAAA,KAAA,EAAA,CAAA;AAAG,IAeH,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAG,EAAH,CAAA;AAAG,IASH,WAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;AAAG,IAcH,QAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;AAAG,IAgCH,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,CAAA;AAAG,IAGH,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAQ,CAAR;AAAG,IAQH,WAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,CAAA;AAAG,IAGH,cAAA,EAAG,CAAH,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,eAAA,EAAA,EAAA,MAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA;AAAE,CAOF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAA;AAAE;AAAE;AAAK;AAAmC;AAGlC;AC1QV,MAAa,eAAe,CAA5B;AAAG;qCANH,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU,mBACR,OAAO,EAAE,CAAC;EAAY,EAAE,eAAe,CAAC,mBACxC,OAAO,EAAE,CAAC,SAAS,EAAE;AAAe,CAAC,mBACrC,YAAY,EAAE,CAAC,SAAS,CAAC,mBACzB,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,aAAa,EAAC,CAAC,eACvE,EAAD,EAAA;;;;;;;;;;0BACE;AAAE;AAAE;AAAK;AACG;AAAsH;AAAK;AAAE;AAAK;AAAmC;AAAsH;AAAK;AAAE;AAAoF","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    // On Safari starting to slide temporarily triggers text selection mode which\n    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n    '(selectstart)': '$event.preventDefault()',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if mouse coordinates need to be inverted.\n    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      // Value is never null but since setters and getters cannot have\n      // different types, the value getter is also typed to return null.\n      return this.displayWith(this.value!);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus(options?: FocusOptions) {\n    this._focusHostElement(options);\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement(options?: FocusOptions) {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n"]}