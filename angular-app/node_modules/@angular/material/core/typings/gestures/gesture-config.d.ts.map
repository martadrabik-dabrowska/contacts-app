{"version":3,"file":"gesture-config.d.ts","sources":["gesture-config.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { InjectionToken } from '@angular/core';\r\nimport { HammerGestureConfig } from '@angular/platform-browser';\r\nimport { MatCommonModule } from '../common-behaviors/common-module';\r\nimport { HammerInstance, HammerOptions } from './gesture-annotations';\r\n/**\r\n * Injection token that can be used to provide options to the Hammerjs instance.\r\n * More info at http://hammerjs.github.io/api/.\r\n */\r\nexport declare const MAT_HAMMER_OPTIONS: InjectionToken<HammerOptions>;\r\n/** Adjusts configuration of our gesture library, Hammer. */\r\nexport declare class GestureConfig extends HammerGestureConfig {\r\n    private _hammerOptions?;\r\n    /** List of new event names to add to the gesture support list */\r\n    events: string[];\r\n    constructor(_hammerOptions?: HammerOptions | undefined, commonModule?: MatCommonModule);\r\n    /**\r\n     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\r\n     *\r\n     * Our gesture names come from the Material Design gestures spec:\r\n     * https://material.io/design/#gestures-touch-mechanics\r\n     *\r\n     * More information on default recognizers can be found in Hammer docs:\r\n     * http://hammerjs.github.io/recognizer-pan/\r\n     * http://hammerjs.github.io/recognizer-press/\r\n     *\r\n     * @param element Element to which to assign the new HammerJS gestures.\r\n     * @returns Newly-created HammerJS instance.\r\n     */\r\n    buildHammer(element: HTMLElement): HammerInstance;\r\n    /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\r\n    private _createRecognizer;\r\n}\r\n"]}